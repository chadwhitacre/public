from httpy._zope.interface import Interface
from httpy._zope.interface import Attribute


__docformat__ = 'rest'
__all__ = ( 'IApp'
          , 'IApplication'
          , 'IFramework'
          , 'IRequest'
          , 'IResponse'
          , 'IResponseFlag'
           )


class IApp(Interface):
    """A module that defines an Application object.
    """

    Application = Attribute('Application', 'A class that implements ' +
                                           'IApplication')


class IApplication(Interface):
    """Represents an application that wants to talk over HTTP.
    """

    def respond(request):
        """Given a request, raise a response.

        The incoming request object will be whatever is emitted by
        IFramework.Request, and this method can raise anything that can be
        meaningfully passed to IFramework.Response.

        Using the default framework, this means that request will be an
        httpy.Request object, and respond ought to raise an httpy.Response.
        Exceptions other than httpy.Response may also be raised; they will
        generate a '500 Internal Server Error' response.

        """


class IFramework(Interface):
    """A module that defines a framework.
    """

    def wrap_request(app, request):
        """Takes an IApplication and an IRequest.

        The object returned by this hook will be passed to your applications'
        respond method, so you can return anything meaningful to applications
        written for your framework.

        """


    def unwrap_response(app, response):
        """Takes an IApplication and a framework-dependent response object.

        The object returned by this hook will be processed by httpy's outbound
        machinery, so you must return an IResponse implementation.

        """


class IRequest(Interface):
    """An HTTP Request message.

        http://www.w3.org/Protocols/rfc2616/rfc2616-sec5.html

    This is a wooden representation of a Request, with only the following API:

        attribute       description or example
        =======================================================================
        raw             the raw Request exactly as it was found on the wire
        raw_line        the Request-Line
        raw_headers     the message headers
        raw_body        the message body

        method          the HTTP method requested
        uri             the full requested URI as a dictionary
        path            the path component of the URI
        message         the HTTP message (i.e., everything but the Request-Line)
                          as an instance of email.Message.Message, or None if
                          there is no message


    The values of raw_line and raw_headers do not include the terminating
    linebreaks of those items. However, raw includes every byte that was
    received over the wire, so it is possible to retrieve those values. raw
    also includes any initial blank lines.

    """

    raw = Attribute( 'raw'
                   , 'the raw Request exactly as it was found on the wire.'
                    )
    raw_line = Attribute('raw_line', 'the Request-Line')
    raw_headers = Attribute('raw_headers', 'the message headers')
    raw_body = Attribute('raw_body', 'the message body')

    method = Attribute('method', 'the HTTP method requested')
    uri = Attribute('uri', 'the full requested URI as a dictionary')
    path = Attribute('path', 'the path component of the URI')
    message = Attribute('message', 'the HTTP message (i.e., everything but ' +
                               'the Request-Line as an instance of ' +
                               'email.Message.Message, or None if there is ' +
                               'no message')


class IResponse(Interface):
    """An HTTP Response message.

    This is the payload for our overloaded raise statement. Task will catch,
    validate, and flatten it before writing it to the wire.

    """

    def __init__(code, body, headers):
        """Takes an int, a string, and a dict. Validation is Task's job.

        Body is second in the parameters list to ease debugging:

            raise Response(500, foo)

        This is httpy's print statement: instant output. If headers were second
        it would require more typing. But for non-2xx responses, httpy will
        automatically set the content-type header set to text/plain.

       """

    code = Attribute('code', "An HTTP response code, e.g., 404")
    body = Attribute('body', "The message body as a string")
    headers = Attribute('headers', "A dictionary of HTTP headers")


class IResponseFlag(Interface):
    """A mixin for Response classes.

    Any custom Response object that your framework defines must inherit from
    ResponseFlag in order to work properly with IFramework's unwrap_response
    hook.

    """
