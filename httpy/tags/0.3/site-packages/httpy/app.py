"""This module implements a basic httpy application.

We implement the basic case: serving static files from the filesystem. In so
doing we demonstrate how to construct an httpy application.

We also provide a mixin class with useful API for more dynamic applications.

"""

import mimetypes
import os
import stat
from Cookie import SimpleCookie
from StringIO import StringIO
from urllib import unquote

from httpy import log
from httpy.Response import Response


def configure(config):
    """Given a server configuration dictionary, return a dictionary.

    This method is called once for each request

    """
    config['defaults'] = ('index.html', 'index.htm')
    return config


class Transaction:
    """Serve a static file from the filesystem.
    """

    def __init__(self, config):
        """Takes a dictionary of configuration info.
        """
        self.config = configure(config)


    def process(self, request):
        """Given an httpy.Request, raise an httpy.Response.
        """

        path = self.translate(request.path)

        mtime = os.stat(path)[stat.ST_MTIME]
        content_length = os.stat(path)[stat.ST_SIZE]

        if self.config['mode'] == 'deployment':

            ims = self.request.message.get('If-Modified-Since')

            length_match = True
            if ims:
                length = ims.group(4)
                if length:
                    try:
                        length = int(length)
                        if length != content_length:
                            length_match = False
                    except:
                        pass

            ims_date = False
            if ims:
                ims_date = http_date.parse_http_date(ims.group(1))

            if length_match and ims_date:
                if mtime <= ims_date:
                    raise NotModified


        # Build a response and raise.
        # ===========================

        content_type = mimetypes.guess_type(path)[0] or 'text/plain'
        log(88, "content type for %s: %s" % (path, content_type))

        response = Response(200)
        #response.headers['Last-Modified'] = mtime
        response.headers['content-type'] = content_type
        response.body = open(path, 'rb').read()
        raise response


    def translate(self, path):
        """Given a URI path, return a corresponding filesystem path.

        The URI path is taken to be rooted in our application root. If it points
        to a directory, look for a default resource. If it points to a file,
        make sure the file exists.

        This method can raise the following Responses:

            301 Moved Permanently
            400 Bad Request
            403 Forbidden
            400 Not Found

        """

        full_path = os.path.join(self.config['root'], path.lstrip('/'))

        if os.path.isdir(full_path):

            if not path.endswith('/'):
                # redirect directory requests to trailing slash
                new_location = '%s/' % path
                response = Response(301)
                response.headers = {'Location':new_location}
                log(98, "Redirecting to trailing slash: %s" % path)
                raise response

            default = ''
            for name in self.config['defaults']:
                _path = os.path.join(full_path, name)
                if os.path.isfile(_path):
                    default = _path
                    break
            full_path = default

            if not default:
                log(94, "No default resource in %s" % path)
                raise Response(403)

        else:
            if not os.path.exists(full_path):
                log(94, "Not Found: %s" % path)
                raise Response(404)

        return full_path


DefaultTransaction = Transaction

class DynamicMixin:
    """This class provides API to help with requests for dynamic resources.

    While httpy.Request keeps close to the HTTP layer, any dynamic application
    will need to comprehend application-specific information encoded in the
    Request. The methods in this mixin represent such information as objects
    from the standard library, stored on the host Transaction.

        method      from (request)          to (self)   type
        =======================================================================
        set_query   querystring             query       cgi.FieldStorage
        set_cookie  message.get('Cookie')   cookie      Cookie.SimpleCookie
        set_post    raw_body                post        cgi.FieldStorage

    """

    def set_query(self, request):
        """Translate request's querystring into a FieldStorage at self.query.
        """

        fp = StringIO(request.querystring)

        headers = {}
        headers['content-type'] = request.message.get('content-type')
        headers['content-length'] = request.message.get('content-length')

        environ = {}
        environ['REQUEST_METHOD'] = request.method

        boundary = request.message.get('boundary')

        query = cgi.FieldStorage( fp = fp
                                , headers = headers
                                , outerboundary = boundary
                                , environ = environ
                                , keep_blank_values = True
                                , strict_parsing = False
                                 )

        self.query = query


    def set_cookie(self, request):
        """Translate request's cookie into a SimpleCookie at self.cookie.
        """
        raw_cookie = request.message.get('Cookie','')
        self.cookie = SimpleCookie(raw_cookie)


    def set_post(self, request):
        """Translate request's body into a FieldStorage at self.post.
        """

        fp = StringIO(request.raw_body)

        headers = {}
        headers['content-type'] = request.message.get('content-type')
        headers['content-length'] = request.message.get('content-length')

        environ = {}
        environ['REQUEST_METHOD'] = request.method

        boundary = request.message.get('boundary')

        post = cgi.FieldStorage( fp = fp
                               , headers = headers
                               , outerboundary = boundary
                               , environ = environ
                               , keep_blank_values = True
                               , strict_parsing = False
                                )

        self.post = post
