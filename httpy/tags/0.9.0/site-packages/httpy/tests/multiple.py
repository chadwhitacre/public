import os
import sys

from httpy import Response
from httpy._zope.interface.exceptions import BrokenImplementation
from httpy._zope.interface.exceptions import BrokenMethodImplementation
from httpy.responders import Multiple
from httpy.tests.TestCaseHttpy import TestCaseHttpy
from httpy.tests.utils import StubRequest


class MULTIPLE(Multiple):
    root = ''
    __ = None
    def __init__(self):
        pass


class Init(TestCaseHttpy):

    def testInit(self):
        from httpy.responders import Static
        mult = Multiple(self.siteroot)
        self.assert_(mult.root == self.siteroot)
        self.assert_(mult.__ is None)
        self.assert_(mult.framework is None)
        self.assert_(len(mult.responders) == 1)
        self.assert_(isinstance(mult.responders[0], Static))


class GetFramework(TestCaseHttpy):

    def setUpUp(self):
        self.mult = MULTIPLE()
        self.mult.root = self.siteroot

    def tearDownDown(self):
        if 'framework' in sys.modules:
            del sys.modules['framework']


    # get_framework
    # =============

    def testNonExistant(self):
        self.buildTestSite([('broomwork.py', '')])
        expected = None
        actual = self.mult.get_framework()
        self.assertEqual(expected, actual)


    # framework in root

    def testFromRoot(self):
        self.buildTestSite([('framework.py', '')])
        expected = os.path.join(self.siteroot, 'framework.py')
        actual = self.mult.get_framework().__file__
        self.assertEqual(expected, actual)

    def testFromRootAPIRoot(self):
        self.buildTestSite([('framework.py', '')])
        expected = self.siteroot
        actual = self.mult.get_framework().root
        self.assertEqual(expected, actual)

    def testFromRoot(self):
        self.buildTestSite([('framework.py', '')])
        expected = None
        actual = self.mult.get_framework().__
        self.assertEqual(expected, actual)


    # framework in __

    def testFromMagicDirectory(self):
        self.buildTestSite(['__', ('__/framework.py', '')])
        expected = os.path.join(self.siteroot, '__', 'framework.py')
        self.mult.__ = os.path.join(self.siteroot, '__')
        actual = self.mult.get_framework().__file__
        self.assertEqual(expected, actual)

    def testFromMagicDirectoryAPIRoot(self):
        self.buildTestSite(['__', ('__/framework.py', '')])
        self.mult.__ = os.path.join(self.siteroot, '__')
        expected = self.siteroot
        actual = self.mult.get_framework().root
        self.assertEqual(expected, actual)

    def testFromMagicDirectoryAPI__(self):
        self.buildTestSite(['__', ('__/framework.py', '')])
        self.mult.__ = os.path.join(self.siteroot, '__')
        expected = os.path.join(self.siteroot, '__')
        actual = self.mult.get_framework().__
        self.assertEqual(expected, actual)


    # root vs. __

    SITE0 = [  '__'
            , ('framework.py', '')
            , ('__/framework.py', '')
             ]

    def testRootTrumpsMagicDirectory(self):
        self.buildTestSite(self.SITE0)
        self.mult.__ = os.path.join(self.siteroot, '__')
        expected = os.path.join(self.siteroot, 'framework.py')
        actual = self.mult.get_framework().__file__
        self.assertEqual(expected, actual)

    def testRootTrumpsMagicDirectoryAPIRoot(self):
        self.buildTestSite(self.SITE0)
        self.mult.__ = os.path.join(self.siteroot, '__')
        expected = self.siteroot
        actual = self.mult.get_framework().root
        self.assertEqual(expected, actual)

    def testRootTrumpsMagicDirectoryAPI__(self):
        self.buildTestSite(self.SITE0)
        self.mult.__ = os.path.join(self.siteroot, '__')
        expected = os.path.join(self.siteroot, '__')
        actual = self.mult.get_framework().__
        self.assertEqual(expected, actual)


    # framework is a class

    FRAMEWORK_0 = "class Framework: gotcha = True"
    FRAMEWORK_1 = "class Framework:\n  root = 'blam'\n  __ = 'yes'"

    def testClass(self):
        self.buildTestSite([('framework.py', self.FRAMEWORK_0)])
        expected = True
        actual = self.mult.get_framework().gotcha
        self.assertEqual(expected, actual)

    def testClassAPIRoot(self):
        self.buildTestSite([('framework.py', self.FRAMEWORK_0)])
        expected = self.siteroot
        actual = self.mult.get_framework().root
        self.assertEqual(expected, actual)

    def testClassAPI__(self):
        self.buildTestSite([('framework.py', self.FRAMEWORK_0)])
        expected = None
        actual = self.mult.get_framework().__
        self.assertEqual(expected, actual)


    # attributes survive

    FRAMEWORK_2 = "root = 'blam'\n__ = 'yes'"

    def testAttributesSurviveRoot(self):
        self.buildTestSite([('framework.py', self.FRAMEWORK_2)])
        expected = 'blam'
        actual = self.mult.get_framework().root
        self.assertEqual(expected, actual)

    def testAttributesSurvive__(self):
        self.buildTestSite([('framework.py', self.FRAMEWORK_2)])
        expected = 'yes'
        actual = self.mult.get_framework().__
        self.assertEqual(expected, actual)

    def testAttributesSurviveClassRoot(self):
        self.buildTestSite([('framework.py', self.FRAMEWORK_1)])
        expected = 'blam'
        actual = self.mult.get_framework().root
        self.assertEqual(expected, actual)

    def testAttributesSurviveClass__(self):
        self.buildTestSite([('framework.py', self.FRAMEWORK_1)])
        expected = 'yes'
        actual = self.mult.get_framework().__
        self.assertEqual(expected, actual)



class AddAPI(TestCaseHttpy):

    def setUpUp(self):
        class RESPONDER:
            def respond(request):
                raise 'heck'
        self.RESPONDER = RESPONDER
        self.mult = MULTIPLE()
        self.mult.root = self.siteroot
        self.mult.__ = None

    def testBasic(self):
        self.mult.add_api(self.RESPONDER, self.siteroot, 'foo-path')
        expected = { 'site_root':self.siteroot
                   , 'site___':None
                   , 'root':self.siteroot
                   , '__':None
                   , 'path':'/'
                   , 'pkg':'foo-path' # straight pass-through
                    }
        actual = self.RESPONDER.__dict__
        for k,v in expected.items():
            self.assertEqual(v, actual[k], "%s: %s != %s" % (k, v, actual[k]))

    def testResponderInRootMagicDir(self):
        self.mult.__ = os.path.join(self.siteroot, '__')
        self.mult.add_api( self.RESPONDER
                         , os.path.join(self.siteroot, '__')
                         , 'foo-path'
                          )
        expected = { 'site_root':self.siteroot
                   , 'site___':os.path.join(self.siteroot, '__')
                   , 'root':self.siteroot
                   , '__':os.path.join(self.siteroot, '__')
                   , 'path':'/'
                   , 'pkg':'foo-path' # straight pass-through
                    }
        actual = self.RESPONDER.__dict__
        for k,v in expected.items():
            self.assertEqual(v, actual[k], "%s: %s != %s" % (k, v, actual[k]))

    def testResponderInSubDirectory(self):
        self.mult.add_api( self.RESPONDER
                         , os.path.join(self.siteroot, 'foo')
                         , 'foo-path'
                          )
        expected = { 'site_root':self.siteroot
                   , 'site___':None
                   , 'root':os.path.join(self.siteroot, 'foo')
                   , '__':None
                   , 'path':'/foo'
                   , 'pkg':'foo-path' # straight pass-through
                    }
        actual = self.RESPONDER.__dict__
        for k,v in expected.items():
            self.assertEqual(v, actual[k], "%s: %s != %s" % (k, v, actual[k]))

    def testResponderKeepsExistingAPI(self):
        self.RESPONDER.root = 'blam'
        self.RESPONDER.site___ = 'fooey'
        self.mult.add_api(self.RESPONDER, self.siteroot, 'foo-path')
        expected = { 'site_root':self.siteroot
                   , 'site___':'fooey'
                   , 'root':'blam'
                   , '__':None
                   , 'path':'/'
                   , 'pkg':'foo-path' # straight pass-through
                    }
        actual = self.RESPONDER.__dict__
        for k,v in expected.items():
            self.assertEqual(v, actual[k], "%s: %s != %s" % (k, v, actual[k]))



class SysPath(TestCaseHttpy):

    # from root

    def testRootDoesntGetAdded(self):
        self.buildTestSite()
        self.mult = MULTIPLE()
        self.mult.sys_path(self.siteroot)
        self.assert_(self.siteroot not in sys.path)

    def testMagicDir(self):
        self.buildTestSite(('__',))
        self.mult = MULTIPLE()
        self.mult.sys_path(self.siteroot)
        expected = os.path.join(self.siteroot, '__')
        self.assert_(expected in sys.path)
        sys.path.remove(expected)

    def testLibTrumpsBase(self):
        self.buildTestSite(('lib','__'))
        self.mult = MULTIPLE()
        self.mult.sys_path(self.siteroot)
        expected = os.path.join(self.siteroot, 'lib')
        self.assert_(expected in sys.path)
        loser = os.path.join(self.siteroot, '__')
        self.assert_(loser not in sys.path)
        sys.path.remove(expected)

    def testSitePackagesTrumpsAll(self):
        self.buildTestSite(('site-packages', 'lib', '__'))
        self.mult = MULTIPLE()
        self.mult.sys_path(self.siteroot)
        expected = os.path.join(self.siteroot, 'site-packages')
        self.assert_(expected in sys.path)
        loser = os.path.join(self.siteroot, 'lib')
        self.assert_(loser not in sys.path)
        loser = os.path.join(self.siteroot, '__')
        self.assert_(loser not in sys.path)
        sys.path.remove(expected)


    # from magic dir

    def testInMagicDirMagicDirNope(self):
        self.buildTestSite(('__', '__/__'))
        self.mult = MULTIPLE()
        self.mult.sys_path(os.path.join(self.siteroot, '__'))
        expected = os.path.join(self.siteroot, '__')
        self.assert_(expected in sys.path)
        sys.path.remove(expected)

    def testInMagicDirLibTrumpsBase(self):
        self.buildTestSite(('__', '__/lib'))
        self.mult = MULTIPLE()
        self.mult.sys_path(os.path.join(self.siteroot, '__'))
        expected = os.path.join(self.siteroot, '__', 'lib')
        self.assert_(expected in sys.path)
        loser = os.path.join(self.siteroot, '__')
        self.assert_(loser not in sys.path)
        sys.path.remove(expected)

    def testInMagicDirSitePackagesTrumpsBoth(self):
        self.buildTestSite(('__', '__/site-packages', '__/lib'))
        self.mult = MULTIPLE()
        self.mult.sys_path(os.path.join(self.siteroot, '__'))
        expected = os.path.join(self.siteroot, '__', 'site-packages')
        self.assert_(expected in sys.path)
        loser = os.path.join(self.siteroot, '__', 'lib')
        self.assert_(loser not in sys.path)
        loser = os.path.join(self.siteroot, '__')
        self.assert_(loser not in sys.path)
        sys.path.remove(expected)



class LoadResponder(TestCaseHttpy):

    def sys_path(foo, bar):
        pass

    def setUpUp(self):
        self.mult = MULTIPLE()
        self.mult.root = 'foo'
        self.mult.__ = 'bar'
        self.mult.sys_path = self.sys_path

    def tearDownDown(self):
        if self.siteroot in sys.modules:
            del sys.modules[self.siteroot]

    MODULE = "def respond(request): raise heck"
    MODULE_NO_FUNCTION = "def resoon(request): raise heck"
    MODULE_BAD_FUNCTION = "def respond(zippy, yay): raise heck"

    CLASS = ("class Responder:\n def respond(self, request):\n  raise heck" +
             "\n gotcha=True")
    CLASS_NO_METHOD = "class Responder:\n def respoon(self, request):\n  pass"
    CLASS_BAD_METHOD = "class Responder:\n def respond(self):\n  raise heck"


    # responder is a module

    def testModuleGood(self):
        self.buildTestSite([('responder.py', self.MODULE)])
        expected = os.path.join(self.siteroot, 'responder.py')
        actual = self.mult.load_responder(self.siteroot).__file__
        self.assertEqual(expected, actual)

    def testModuleWithNoRespondMethod(self):
        self.buildTestSite([('responder.py', self.MODULE_NO_FUNCTION)])
        self.assertRaises( BrokenImplementation
                         , self.mult.load_responder
                         , self.siteroot
                          )

    def testModuleWithBadRespondFunction(self):
        self.buildTestSite([('responder.py', self.MODULE_BAD_FUNCTION)])
        self.assertRaises( BrokenMethodImplementation
                         , self.mult.load_responder
                         , self.siteroot
                          )


    # responder is a class

    def testClassGood(self):
        self.buildTestSite([('responder.py', self.CLASS)])
        expected = True
        actual = self.mult.load_responder(self.siteroot).gotcha
        self.assertEqual(expected, actual)

    def testClassWithNoRespondMethod(self):
        self.buildTestSite([('responder.py', self.CLASS_NO_METHOD)])
        self.assertRaises( BrokenImplementation
                         , self.mult.load_responder
                         , self.siteroot
                          )

    def testClassWithBadRespondMethod(self):
        self.buildTestSite([('responder.py', self.CLASS_BAD_METHOD)])
        self.assertRaises( BrokenMethodImplementation
                         , self.mult.load_responder
                         , self.siteroot
                          )

    # no responder

    def testNoResponder(self):
        self.buildTestSite()
        self.assertRaises( ImportError
                         , self.mult.load_responder
                         , self.siteroot
                          )


class GetResponders(TestCaseHttpy):

    def null(self, *a, **k):
        pass

    def setUpUp(self):
        self.mult = MULTIPLE()
        self.mult.root = self.siteroot
        self.mult.__ = os.path.join(self.siteroot, '__')
        self.mult.sys_path = self.null

    def testNoRespondersDefined(self):
        from httpy.responders import Static
        actual = self.mult.get_responders()
        self.mult.__ = None
        self.assert_(len(actual) == 1)
        self.assert_(isinstance(actual[0], Static))

    def testOneResponderInRoot(self):
        self.buildTestSite([( 'responder.py'
                             , 'def respond(request): raise heck')
                             ])
        self.mult.__ = None
        actual = self.mult.get_responders()
        self.assert_(len(actual) == 1)
        expected = os.path.join(self.siteroot, 'responder.py')
        actual = actual[0].__file__
        self.assertEqual(expected, actual)

    def testRespondersFoundInMagicDirectory(self):
        self.buildTestSite([   '__'
                            , ( '__/responder.py'
                              , 'def respond(request): raise heck')
                             ])
        actual = self.mult.get_responders()
        expected = os.path.join(self.siteroot, '__', 'responder.py')
        actual = actual[0].__file__
        self.assertEqual(expected, actual)

    def testButRespondersBelowMagicDirectoryAreSkipped(self):
        from httpy.responders import Static
        self.buildTestSite([   '__'
                            ,  '__/please'
                            , ('__/please/responder.py'
                            ,  'def respond(request): raise heck')
                             ])
        actual = self.mult.get_responders()
        self.assert_(len(actual) == 1)
        self.assert_(isinstance(actual[0], Static))

    def testNestedResponders(self):
        self.buildTestSite([   '__'
                            , ('__/responder.py'
                            ,  'def respond(request): raise heck')
                            ,  'foo'
                            , ('foo/responder.py'
                            ,  'def respond(request): raise heck')
                            ,  'foo/bar'
                            , ('foo/bar/responder.py'
                            ,  'def respond(request): raise heck')
                             ])
        responders = self.mult.get_responders()
        self.assert_(len(responders) == 3)

        expected = os.path.join(self.siteroot, 'foo', 'bar', 'responder.py')
        actual = responders[0].__file__
        self.assertEqual(expected, actual)

        expected = os.path.join(self.siteroot, 'foo', 'responder.py')
        actual = responders[1].__file__
        self.assertEqual(expected, actual)

        expected = os.path.join(self.siteroot, '__', 'responder.py')
        actual = responders[2].__file__
        self.assertEqual(expected, actual)


class GetResponder(TestCaseHttpy):

    def setUpUp(self):
        self.mult = MULTIPLE()
        self.mult.root = self.siteroot

    def tearDownDown(self):
        from httpy.responders import Static
        Static.root = ''
        self.strip_api(Static)
        for r in self.mult.responders:
            if hasattr(r, 'pkg'):
                if r.pkg in sys.path:
                    sys.path.remove(r.pkg)

    def strip_api(self, r):
        for n in ('__', 'site___', 'site_root', 'pkg', 'path'):
            if hasattr(r, n):
                delattr(r, n)



    def testBasic(self):
        from httpy.responders import Static
        self.buildTestSite()
        self.req = StubRequest(path='/')
        self.mult.responders = self.mult.get_responders()
        expected = Static
        actual = self.mult.get_responder(self.req)
        self.assert_(isinstance(actual, expected))


    # subdir

    def testSubDirNoSlash(self):
        self.buildTestSite(['foo',('foo/responder.py'
                           , 'def respond(r):\n raise heck\ngotcha=True')])
        self.req = StubRequest(path='/foo')
        self.mult.responders = self.mult.get_responders()
        actual = self.mult.get_responder(self.req)
        self.assert_(actual.gotcha)

    def testSubDirWithSlash(self):
        self.buildTestSite(['foo',('foo/responder.py'
                           , 'def respond(r):\n raise heck\ngotcha=True')])
        self.req = StubRequest(path='/foo/')
        self.mult.responders = self.mult.get_responders()
        actual = self.mult.get_responder(self.req)
        self.assert_(actual.gotcha)

    def testSubDirWithWhatever(self):
        self.buildTestSite(['foo',('foo/responder.py'
                           , 'def respond(r):\n raise heck\ngotcha=True')])
        self.req = StubRequest(path='/foo/bar')
        self.mult.responders = self.mult.get_responders()
        actual = self.mult.get_responder(self.req)
        self.assert_(actual.gotcha)


    # snoop protection

    def testEtcMasterPasswd(self):
        self.buildTestSite()
        self.mult.responders = self.mult.get_responders()

        self.req = StubRequest(path='../../../../../../../etc/master.passwd')
        self.assertRaises(Response, self.mult.get_responder, self.req)

        self.req = StubRequest(path='../../../../../../../etc/master.passwd')
        try:
            actual = self.mult.get_responder(self.req)
        except Response, response:
            self.assertEqual(response.code, 400)


    def testMagicDir(self):
        self.buildTestSite(['__'])
        self.mult.responders = self.mult.get_responders()

        self.req = StubRequest(path='/__')
        self.assertRaises(Response, self.mult.get_responder, self.req)

        self.req = StubRequest(path='/__')
        try:
            actual = self.mult.get_responder(self.req)
        except Response, response:
            self.assertEqual(response.code, 403)

    def testSitePackagesInSubDir(self):
        self.buildTestSite(['bar', 'bar/site-packages',
                           ('bar/responder.py','def respond(r):raise')])
        self.mult.responders = self.mult.get_responders()

        self.req = StubRequest(path='/bar/site-packages/')
        self.assertRaises(Response, self.mult.get_responder, self.req)

        self.req = StubRequest(path='/bar/site-packages/')
        try:
            actual = self.mult.get_responder(self.req)
        except Response, response:
            self.assertEqual(response.code, 403)

    def testLib(self):
        self.buildTestSite(['lib',
                            ('responder.py','def respond(r):raise')])
        self.mult.responders = self.mult.get_responders()

        self.req = StubRequest(path='/lib/')
        self.assertRaises(Response, self.mult.get_responder, self.req)

        self.req = StubRequest(path='/lib/')
        try:
            actual = self.mult.get_responder(self.req)
        except Response, response:
            self.assertEqual(response.code, 403)


    # missing directories

    def testGoneRoot(self):
        self.buildTestSite()
        self.mult.responders = self.mult.get_responders()
        os.rmdir(self.siteroot)

        self.req = StubRequest(path='/')
        self.assertRaises(Response, self.mult.get_responder, self.req)

        self.req = StubRequest(path='/')
        try:
            actual = self.mult.get_responder(self.req)
        except Response, response:
            self.assertEqual(response.code, 500)

    def testGoneMagicDir(self):
        self.buildTestSite(['__'])
        self.mult.__ = os.path.join(self.siteroot, '__')
        self.mult.responders = self.mult.get_responders()
        os.rmdir(self.mult.__)
        self.req = StubRequest(path='/')
        self.assertRaises(Response, self.mult.get_responder, self.req)
        try:
            actual = self.mult.get_responder(self.req)
        except Response, response:
            self.assertEqual(response.code, 500)

    def testGoneSitePackages(self):
        self.buildTestSite(['site-packages',('responder.py',
                            'def respond(r):heck')])
        self.mult.responders = self.mult.get_responders()
        os.rmdir(os.path.join(self.siteroot, 'site-packages'))
        self.req = StubRequest(path='/')
        self.assertRaises(Response, self.mult.get_responder, self.req)
        try:
            actual = self.mult.get_responder(self.req)
        except Response, response:
            self.assertEqual(response.code, 500)

    def testGoneLib(self):
        self.buildTestSite(['lib',('responder.py','def respond(r):heck')])
        self.mult.responders = self.mult.get_responders()
        os.rmdir(os.path.join(self.siteroot, 'lib'))
        self.req = StubRequest(path='/')
        self.assertRaises(Response, self.mult.get_responder, self.req)
        try:
            actual = self.mult.get_responder(self.req)
        except Response, response:
            self.assertEqual(response.code, 500)



    def testGoneMagicDirSitePackages(self):
        self.buildTestSite(['__', '__/site-packages',
                           ('__/responder.py','def respond(r): raise heck')])
        self.mult.responders = self.mult.get_responders()
        os.rmdir(os.path.join(self.siteroot, '__', 'site-packages'))
        self.req = StubRequest(path='/')
        self.assertRaises(Response, self.mult.get_responder, self.req)
        try:
            actual = self.mult.get_responder(self.req)
        except Response, response:
            self.assertEqual(response.code, 500)

    def testGoneMagicDirLib(self):
        self.buildTestSite(['__', '__/lib',
                           ('__/responder.py','def respond(r): raise heck')])
        self.mult.responders = self.mult.get_responders()
        os.rmdir(os.path.join(self.siteroot, '__', 'lib'))
        self.req = StubRequest(path='/')
        self.assertRaises(Response, self.mult.get_responder, self.req)
        try:
            actual = self.mult.get_responder(self.req)
        except Response, response:
            self.assertEqual(response.code, 500)

    def testButMagicDirAndSitePackagesInRootIsFine(self):
        sys_path = sys.path[:]
        self.buildTestSite(['__', 'lib', ('__/responder.py',
                            'def respond(r):\n raise heck\ngotcha=True')])
        self.mult.responders = self.mult.get_responders()
        os.rmdir(os.path.join(self.siteroot, 'lib'))

        self.req = StubRequest(path='/')
        responder = self.mult.get_responder(self.req)
        self.assert_(responder.gotcha)
        self.strip_api(responder)
        sys.path = sys_path[:]
