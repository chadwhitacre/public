import os
from SocketServer import ThreadingTCPServer

from httpy import log
from httpy.Handler import Handler


class Server(ThreadingTCPServer):
    """An httpy server.

    Instantiate with a Config object, and start it with start().

    """

    http_version = (1, 1)
    http_version_string = "HTTP/1.1" # Not actually true yet. :-(
    response_header = "httpy/0.3"
    request_queue_size = 10

    def __init__(self, config):
        """Takes an httpy.Config object.

        We stick verbosity in the environment so that httpy.log can use it.

        """

        self.config = config
        os.environ["HTTPY_VERBOSITY"] = str(self.config['verbosity'])
        addr = (self.config['ip'], self.config['port'])
        if self.config['mode'] == 'development':
            self.allow_reuse_address = True

        ThreadingTCPServer.__init__(self, addr, Handler)


    def start(self):
        log(90, "server started")
        try:
            self.serve_forever()
        except KeyboardInterrupt:
            log(90, "server stopped")
        except:
            log(1, "server killed")
