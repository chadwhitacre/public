import asyncore
import os

from zope.server.serverbase import ServerBase
from zope.server.taskthreads import ThreadedTaskDispatcher

from httpy.Channel import Channel
from httpy.AppCache import AppCache
from httpy.utils import log


class Server(ServerBase):
    """An httpy server.

    Instantiate with a Config-derived dictionary, and start it with start().

    """

    # ServerBase boilerplate
    channel_class = Channel
    SERVER_IDENT = 'httpy'


    http_version = (1, 0)
    http_version_string = "HTTP/1.0"
    response_header = "httpy/0.5"


    def __init__(self, config):
        """Takes a dictionary as produced by httpy.Config.ossify.

        We stick verbosity in the environment so that httpy.log can use it. The
        thread count could probably be exposed to configuration, but I still
        want to hold out the possibility of swapping out a different base
        server. The AppCache that we build here is keyed to the applications'
        filesystem roots; the values are application objects.

        """

        self.config = config
        os.environ["HTTPY_VERBOSITY"] = str(self.config['verbosity'])

        td = ThreadedTaskDispatcher()
        td.setThreadCount(10)

        self.apps = AppCache(config['mode'])
        for app in config['apps']:
            __ = os.path.join(config['root'], app.lstrip('/'), '__')
            if not os.path.isdir(__) and app == '/':
                __ = None
            dummy = self.apps[__] # Getting an item primes the cache.

        ServerBase.__init__( self
                           , config['ip']
                           , config['port']
                           , start=0
                           , task_dispatcher=td
                            )


    def start(self):
        self.accept_connections()
        try:
            log(90, 'starting server on ...')
            log(99, "%s\n\n" % ("="*76))
            asyncore.loop(timeout=5)
        except KeyboardInterrupt:
            log(90, 'shutting down...')
            self.task_dispatcher.shutdown()
