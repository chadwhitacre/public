import asyncore
import os

from zope.server.serverbase import ServerBase
from zope.server.taskthreads import ThreadedTaskDispatcher

from httpy.Channel import Channel
from httpy.TransactionCache import TransactionCache
from httpy.utils import log, get_transaction


class Server(ServerBase):
    """An httpy server.

    Instantiate with a Config-derived dictionary, and start it with start().

    import-time -- import app
        in development mode, this happens from Task, once per request
        in deployment mode, this happens at config


    """

    # ServerBase boilerplate
    channel_class = Channel
    SERVER_IDENT = 'httpy'


    http_version = (1, 1)
    http_version_string = "HTTP/1.1" # Not actually true yet. :-(
    response_header = "httpy/0.5"


    def __init__(self, config):
        """Takes a dictionary as produced by httpy.Config.ossify.

        We stick verbosity in the environment so that httpy.log can use it.

        """

        self.config = config
        os.environ["HTTPY_VERBOSITY"] = str(self.config['verbosity'])

        td = ThreadedTaskDispatcher()
        td.setThreadCount(10)

        if config['mode'] == 'deployment':
            self.transactions = TransactionCache()
            for app in config['apps']:
                __ = os.path.join(app, '__')
                self.transactions[app] = get_transaction(__)
        else:
            self.transactions = None
        import pdb; pdb.set_trace()

        ServerBase.__init__( self
                           , config['ip']
                           , config['port']
                           , start=0
                           , task_dispatcher=td
                            )


    def start(self):
        self.accept_connections()
        try:
            log(90, 'starting server on ...')
            asyncore.loop(timeout=5)
        except KeyboardInterrupt:
            log(90, 'shutting down...')
            self.task_dispatcher.shutdown()
