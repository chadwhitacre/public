import asyncore
import os
import sys

from httpy._zope.server.serverbase import ServerBase
from httpy._zope.server.taskthreads import ThreadedTaskDispatcher

from httpy.Channel import Channel
from httpy.utils import log


class Server(ServerBase):
    """An httpy server.

    Instantiate with a ServerConfig-derived dictionary, and start it with start().

    """

    # ServerBase boilerplate
    channel_class = Channel
    SERVER_IDENT = 'httpy'


    http_version = (1, 0)
    http_version_string = "HTTP/1.0"
    response_header = "httpy/0.5"


    def __init__(self, config, threads=10):
        """Takes an httpy.ServerServerConfig object.

        We stick verbosity in the environment so that httpy.log can use it. The
        thread count should probably be exposed to configuration, but I still
        want to hold out the possibility of swapping out a different base
        server, which may change the meaning of that parameter.

        """

        self.config = config
        self.apps = config.apps.copy()
        os.environ["HTTPY_VERBOSITY"] = str(config.verbosity)
        td = ThreadedTaskDispatcher()
        td.setThreadCount(threads)


        # Influence sys.path.
        # ===================

        site_packages = os.path.join( self.config.root
                                    , '__'
                                    , 'site-packages'
                                     )
        if os.path.isdir(site_packages):
            if os.path.isdir(site_packages):
                log(95, "Inserting %s in sys.path" % site_packages)
                sys.path.insert(0, site_packages)



        # Let our base class have its way.
        # ================================

        ServerBase.__init__( self
                           , config.ip
                           , config.port
                           , start=0
                           , task_dispatcher=td
                            )


    def start(self):
        self.accept_connections()
        try:
            addr, port = self.socket.getsockname()
            log(90, "httpy started on port %s" % port)
            log(99, "%s\n\n" % ("="*76))
            asyncore.loop(timeout=5)
        except KeyboardInterrupt:
            log(90, "shutting down...")
            self.task_dispatcher.shutdown()
