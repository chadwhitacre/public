import logging

from httpy import Response


logger = logging.getLogger('httpy.frameworks.passthrough')


class Framework:
    """This default framework is a pass-through. See IFramework for doc.
    """

    def __init__(self, apps):
        self.apps = apps



    def wrap_request(self, app, request):
        """Do some validation.
        """

        # Is the app still on the filesystem?
        if not os.path.isdir(self.app.fs_root):
            raise Response(404)

        if self.server.config.__:

            resource_fs_path = uri_to_fs( self.app.site_root
                                        , self.app.fs_root
                                        , self.app.uri_root
                                        , self.request.path
                                        , raw=True
                                         )

            # Is the site's magic directory still on the filesystem?
            if not os.path.isdir(self.server.config.__):
                raise Response(500, "The site's magic directory has " +
                                    "disappeared.")

            # Protect the magic directory from direct access, but make sure we
            # can serve a default app.py from there.
            if resource_fs_path.startswith(self.server.config.__):
                app_py = os.path.join(self.server.config.__, 'app.py')
                if not resource_fs_path == app_py:
                    raise Response(404)


        return request

    def get_app(self, request):
        """Translates request.path to app.uri_path
        """

        app = None
        for _app in self.apps:
            if request.path.startswith(_app.uri_root):
                app = _app
                break
        if app is None:
            # This catches, e.g., ../../../../../../../../../etc/master.passwd
            raise Response(400)

        logger.debug("Using %s for this request." % app)
        return app

    def unwrap_response(self, app, response):
        """We expect an httpy.Response or a standard Python exception.

        Note that we *return* an error Response from here rather than raising
        it.

        """
        if not isinstance(response, (Response, Exception)):
            logger.error("You must raise a Response or Exception.")
            return Response(500)
        return response


Framework = Framework()