"""This module provides two mixins to aid in httpy application development.

StaticMixin woodenly translates a request URI path to a filesystem path.
DynamicMixin parses the raw querystring, cookie, and post information into more
useful formats.

"""

import mimetypes
import os
import stat
from Cookie import SimpleCookie
from StringIO import StringIO
from urllib import unquote

from httpy import log
from httpy.Response import Response


class StaticMixin:
    """Serve a static file from the filesystem.
    """

    def set_path(self, path):
        """Translate request's path into a filesystem path.

        The URI path is taken to be rooted in our application root. If it points
        to a directory, look for a default resource. If it points to a file,
        make sure the file exists.

        This method assumes that there is a dict in self.config with a key
        'defaults', the value of which is a sequence of default filenames.

        This method can raise the following Responses:

            301 Moved Permanently
            400 Bad Request
            403 Forbidden
            400 Not Found

        If successful, we add a key to self.config ('path') and return None.

        """

        full_path = os.path.join(self.config['root'], path.lstrip('/'))

        if os.path.isdir(full_path):

            if not path.endswith('/'):
                # redirect directory requests to trailing slash
                new_location = '%s/' % path
                response = Response(301)
                response.headers = {'Location':new_location}
                log(98, "Redirecting to trailing slash: %s" % path)
                raise response

            default = ''
            for name in self.config['defaults']:
                _path = os.path.join(full_path, name)
                if os.path.isfile(_path):
                    default = _path
                    break
            full_path = default

            if not default:
                log(94, "No default resource in %s" % path)
                raise Response(403)

        else:
            if not os.path.exists(full_path):
                log(94, "Not Found: %s" % path)
                raise Response(404)

        self.config['path'] = full_path


class DynamicMixin:
    """This class provides API to help with requests for dynamic resources.

    While httpy.Request keeps close to the HTTP layer, any dynamic application
    will need to comprehend application-specific information encoded in the
    Request. The methods in this mixin represent such information as objects
    from the standard library, stored in the host Transaction's config.

        method      from (request)          to (config) type
        =======================================================================
        set_query   querystring             query       cgi.FieldStorage
        set_cookie  message.get('Cookie')   cookie      Cookie.SimpleCookie
        set_post    raw_body                post        cgi.FieldStorage

    """

    def set_query(self, request):
        """Translate request's querystring into a FieldStorage.
        """

        fp = StringIO(request.querystring)

        headers = {}
        headers['content-type'] = request.message.get('content-type')
        headers['content-length'] = request.message.get('content-length')

        environ = {}
        environ['REQUEST_METHOD'] = request.method

        boundary = request.message.get('boundary')

        query = cgi.FieldStorage( fp = fp
                                , headers = headers
                                , outerboundary = boundary
                                , environ = environ
                                , keep_blank_values = True
                                , strict_parsing = False
                                 )

        self.config['query'] = query


    def set_cookie(self, request):
        """Translate request's cookie into a SimpleCookie.
        """
        raw_cookie = request.message.get('Cookie','')
        self.config['cookie'] = SimpleCookie(raw_cookie)


    def set_post(self, request):
        """Translate request's body into a FieldStorage.
        """

        fp = StringIO(request.raw_body)

        headers = {}
        headers['content-type'] = request.message.get('content-type')
        headers['content-length'] = request.message.get('content-length')

        environ = {}
        environ['REQUEST_METHOD'] = request.method

        boundary = request.message.get('boundary')

        post = cgi.FieldStorage( fp = fp
                               , headers = headers
                               , outerboundary = boundary
                               , environ = environ
                               , keep_blank_values = True
                               , strict_parsing = False
                                )

        self.config['post']= post
