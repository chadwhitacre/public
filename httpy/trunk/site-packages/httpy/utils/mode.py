import os


class mode:
    """Provide an API to httpy's runtime mode.

    This API is read-only, but we check os.environ on each call, so we will see
    any changes you make there.

    Usage:

        >>> httpy.mode                  # access to current mode
        development
        >>> httpy.mode.IS_DEVELOPMENT   # exposes flags
        True
        >>> httpy.mode.is_dep           # takes abbrevations; case-insensitive
        False
        >>> httpy.mode.IS_DE            # ambiguous == unknown
        Traceback (most recent call last):
        ...
        AttributeError
        >>> httpy.mode.default          # can see default mode
        'development'
        >>>


    The default is development, so that you don't accidentally connect to a live
    data source or something.

    """

    __options = ('debugging', 'deployment', 'development', 'staging')
    __longest = ''

    default = 'development'

    def __init__(self):
        i = 0
        for o in self.__options:
            if len(o) > i:
                self.__longest = o
                i = len(o)
        self.__range = range(1, len(self.__longest)+1)

    def __repr__(self):
        return self._current()
    __str__ = __repr__

    def _current(self):
        return os.environ.get('HTTPY_MODE', self.default)

    def _interpret(self, mode):
        """Given a possibly abbreviated mode, return the full name.
        """
        mode = mode.lower()
        for i in self.__range:
            matches = [o for o in self.__options if mode.startswith(o[:i])]
            if len(matches) == 1:
                return matches[0]
        return ''

    def __getattr__(self, name):
        """Try to interpret name as a mode, and return a boolean.
        """
        name = name.lower()
        if not name.startswith('is_'):
            raise AttributeError
        mode = self._interpret(name[3:])
        if mode not in self.__options:
            raise AttributeError
        return mode == self._current()

mode = mode() # Singleton