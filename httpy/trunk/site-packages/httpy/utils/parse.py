import cgi
from Cookie import SimpleCookie
from StringIO import StringIO
from urllib import unquote


__all__ = ['parse_body', 'parse_cookie', 'parse_query', 'parse_fieldstorage']


# Following are some parsers useful for dynamic applications.
#
# While httpy.couplers.standalone.request keeps close to the HTTP layer, any dynamic application
# will need to comprehend application-specific information encoded in the
# Request. The functions below return representations of such information as
# objects from the standard library.
#
#   function      uses                    returns
#   =========================================================
#   parse_body    raw_body                cgi.FieldStorage
#   parse_cookie  headers.get('Cookie')   Cookie.SimpleCookie
#   parse_query   uri['query']            cgi.FieldStorage


def parse_body(request):
    """Translate request's body into a cgi.FieldStorage.
    """

    if request.raw_body == '':
        body = None
    else:
        fp = StringIO(request.raw_body)

        headers = {}
        headers['content-type'] = request.headers.get('content-type', '')
        headers['content-length'] = request.headers.get('content-length', '')

        environ = {}
        environ['REQUEST_METHOD'] = request.method

        boundary = request.headers.get('boundary')

        body = cgi.FieldStorage( fp = fp
                               , headers = headers
                               , outerboundary = boundary
                               , environ = environ
                               , keep_blank_values = True
                               , strict_parsing = False
                                )
    return body


def parse_cookie(request):
    """Translate request's cookie into a Cookie.SimpleCookie.
    """

    raw_cookie = request.headers.get('Cookie','')
    return SimpleCookie(raw_cookie)


def parse_query(request):
    """Translate request's querystring into a cgi.FieldStorage.
    """

    querystring = request.uri['query']

    headers = {'content-type':'application/x-www-form-urlencoded'}

    environ = {}
    environ['REQUEST_METHOD'] = 'GET' # even for POST requests!
    environ['QUERY_STRING'] = querystring

    query = cgi.FieldStorage( fp = None
                            , headers = headers
                            , outerboundary = ''
                            , environ = environ
                            , keep_blank_values = True
                            , strict_parsing = False
                             )
    return query


def parse_fieldstorage(fieldstorage, encoding=None):
    """Given a cgi.FieldStorage object, return a dictionary.

    The values in the dictionary will be whitespace-stripped and HTML-escaped. 
    If encoding is not None, values will also be decoded per that encoding.

    """
    d = {}
    if fieldstorage is not None:
        for k in fieldstorage:
            d[k] = cgi.escape(fieldstorage.getfirst(k).strip())
            if encoding:
                d[k] = d[k].decode(encoding)
    return d
