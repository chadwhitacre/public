"""This is a collection of utilities for httpy and httpy applications.
"""

import cgi
import logging
import os
from Cookie import SimpleCookie
from StringIO import StringIO
from urllib import unquote

from httpy import Response



# mode
# ====

class mode:
    """Provide an API to httpy's runtime mode.

    This API is read-only, but we check os.environ on each call, so we will see
    any changes you make there.

    Usage:

        >>> httpy.mode                  # access to current mode
        development
        >>> httpy.mode.IS_DEVELOPMENT   # exposes flags
        True
        >>> httpy.mode.is_dep           # takes abbrevations; case-insensitive
        False
        >>> httpy.mode.IS_DE            # ambiguous == unknown
        Traceback (most recent call last):
        ...
        AttributeError
        >>> httpy.mode.default          # can see default mode
        'deployment'
        >>>

    """

    __options = ('deployment', 'staging', 'development', 'debugging')
    __longest = ''

    default = 'deployment'

    def __init__(self):
        i = 0
        for o in self.__options:
            if len(o) > i:
                self.__longest = o
                i = len(o)
        self.__range = range(1, len(self.__longest)+1)

    def __repr__(self):
        return os.environ.get('HTTPY_MODE', '')
    __str__ = __repr__

    def interpret(self, mode):
        """Given a possibly abbreviated mode, return the full name.
        """
        mode = mode.lower()
        for i in self.__range:
            matches = [o for o in self.__options if mode.startswith(o[:i])]
            if len(matches) == 1:
                return matches[0]
        return ''

    def __getattr__(self, name):
        """Try to interpret name as a mode, and return a boolean.
        """
        name = name.lower()
        if not name.startswith('is_'):
            raise AttributeError
        mode = self.interpret(name[3:])
        if mode not in self.__options:
            raise AttributeError
        if 'HTTPY_MODE' in os.environ:
            return os.environ['HTTPY_MODE'] == mode
        else:
            return mode == self.default

mode = mode() # Singleton



# uri_to_fs
# =========

def uri_to_fs(path_uri, root_fs, defaults=[]):
    """Map a requested URI to the filesystem.

    Takes a URI path, a filesystem path, and a list of filenames which should be
    considered default resources. The URI path is taken to be rooted in the
    filesystem path. If it points to a directory, we ensure the URI ends with a
    slash, and we look for a default resource if any are named. If the URI
    points to a file, we make sure the file exists.

    This method can raise the following Responses:

        301 Moved Permanently
        403 Forbidden
        404 Not Found

    If successful, we return the filesystem path to the particular resource.

    """

    logger = logging.getLogger('httpy.utils.uri_to_fs')


    # Knit the requested URI onto the filesystem path.
    # ================================================

    _parts = root_fs + path_uri.lstrip('/').split('/')
    path_fs = os.sep.join(_parts)
    path_fs = os.path.realpath(path_fs)


    # Interpret it.
    # =============

    if os.path.isdir(path_fs):

        # Process the request as a directory.
        # ===================================

        if not path_fs.endswith('/'):
            # redirect directory requests to trailing slash
            new_location = '%s/' % path_fs
            response = Response(301)
            response.headers['Location'] = new_location
            logger.debug("redirecting to trailing slash: %s" % new_location)
            raise response

        logger.debug("looking for these defaults: %s" % str(defaults))
        default = None
        for name in defaults:
            _path = os.path.join(path_fs, name)
            if os.path.isfile(_path):
                default = _path
                break
        if default is None:
            logger.debug("no default resource in: %s" % path_fs)
            raise Response(403)
        path_fs = default

    else:

        # Process the request as a file.
        # ==============================

        if not os.path.exists(path_fs):
            logger.debug("did not find %s at %s" % (path_uri, path_fs))
            raise Response(404)


    return path_fs



# Following are some parsers useful for dynamic applications.
#
# While httpy.Request keeps close to the HTTP layer, any dynamic application
# will need to comprehend application-specific information encoded in the
# Request. The functions below return representations of such information as
# objects from the standard library.
#
#   function      uses                    returns
#   =========================================================
#   parse_body    raw_body                cgi.FieldStorage
#   parse_cookie  message.get('Cookie')   Cookie.SimpleCookie
#   parse_query   uri['query']            cgi.FieldStorage


def parse_body(request):
    """Translate request's body into a cgi.FieldStorage.
    """

    if request.raw_body == '':
        body = None
    else:
        fp = StringIO(request.raw_body)

        headers = {}
        headers['content-type'] = request.message.get('content-type')
        headers['content-length'] = request.message.get('content-length')

        environ = {}
        environ['REQUEST_METHOD'] = request.method

        boundary = request.message.get('boundary')

        body = cgi.FieldStorage( fp = fp
                               , headers = headers
                               , outerboundary = boundary
                               , environ = environ
                               , keep_blank_values = True
                               , strict_parsing = False
                                )
    return body


def parse_cookie(request):
    """Translate request's cookie into a Cookie.SimpleCookie.
    """

    raw_cookie = request.message.get('Cookie','')
    return SimpleCookie(raw_cookie)


def parse_query(request):
    """Translate request's querystring into a cgi.FieldStorage.
    """

    querystring = request.uri['query']

    headers = {'content-type':'application/x-www-form-urlencoded'}

    environ = {}
    environ['REQUEST_METHOD'] = 'GET' # even for POST requests!
    environ['QUERY_STRING'] = querystring

    query = cgi.FieldStorage( fp = None
                            , headers = headers
                            , outerboundary = ''
                            , environ = environ
                            , keep_blank_values = True
                            , strict_parsing = False
                             )
    return query
