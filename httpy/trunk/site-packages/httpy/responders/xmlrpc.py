import logging
import sys
import traceback
import xmlrpclib

from httpy import Response


__all__ = ('App',)
__docformat__ = 'reStructuredText'

logger = logging.getLogger('httpy.apps.xmlrpc')


class Responder:
    """This responder serves XMLRPC requests.

        >>> import httpy
        >>> class Responder(httpy.responders.XMLRPC):
        ...   protected = XMLRPC + ('private',)
        ...   def private(self):
        ...     return 'leave me alone!'
        ...   def ping(self):
        ...     return 'pong'
        ...
        >>> httpy.main(Responder())

    We borrowed some from SimpleXMLRPCDispatcher, but ended up simplifying.

    """

    __protected = ('respond', 'serve_xmlrpc')
    protected = ()

    def respond(self, request):
        self.serve_xmlrpc(request)

    def serve_xmlrpc(self):
        """Serve an XMLRPC request.
        """

        if request.method != 'POST':
            raise Response(501)
        else:
            response = Response(200)
            try:
                params, method = xmlrpclib.loads(request.raw_body)


                # Find a callable.
                # ================

                protected = (  method.startswith('_')
                            or method in self.__protected
                            or method in self.protected
                              )
                if protected:
                    raise NotImplementedError(method)
                else:
                    func = getattr(self, method, None)
                    if func is None:
                        raise NotImplementedError(method)


                # Call it.
                # ========

                try:
                    body = xmlrpclib.dumps( (func(*params),)
                                          , methodresponse=1
                                          , allow_none=True
                                           )
                except xmlrpclib.Fault, fault:
                    body = xmlrpclib.dumps(fault)
                except:
                    err = (sys.exc_type, sys.exc_value)
                    body = xmlrpclib.dumps(xmlrpclib.Fault(1, "%s:%s" % err))


            except: # Bug in the module.
                logger.error("Error serving request.")
                logger.debug(traceback.format_exc())
                raise Response(500)

            else:   # Valid XMLRPC response.
                response.headers = {'Content-Type': 'text/xml'}
                raise response
