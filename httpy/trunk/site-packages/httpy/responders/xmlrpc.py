"""This module defines a mixin for building XMLRPC servers.

>>> from httpy.apps import XMLRPC
>>> class Application(XMLRPC.App):
...   def ping():
...     return 'pong'
...
>>>

"""
import logging
import sys
import traceback
import xmlrpclib

from httpy.Response import Response


__all__ = ('App',)
__docformat__ = 'reStructuredText'

logger = logging.getLogger('httpy.apps.xmlrpc')


class App:
    """We borrowed some from SimpleXMLRPCDispatcher, but ended up simplifying.
    """

    foo = ('bar',)

    def respond(self, request):

        if request.method != 'POST':
            raise Response(501)
        else:
            response = Response(200)
            try:
                response.body = self.serve_xmlrpc(request)
            except:
                # Bug in the module.
                logger.error("Error serving request.")
                logger.debug(traceback.format_exc())
                raise Response(500)
            else:
                # Valid XMLRPC response.
                response.headers = {'Content-Type': 'text/xml'}
                raise response


    def serve_xmlrpc(self, request):
        """Serve an XMLRPC request.
        """

        params, method = xmlrpclib.loads(request.raw_body)


        # Find a callable.
        # ================

        if method.startswith('_') or method in ('respond', 'serve_xmlrpc'):
            raise NotImplementedError(method)
        else:
            func = getattr(self, method, None)
            if func is None:
                raise NotImplementedError(method)


        # Call it.
        # ========

        try:
            body = xmlrpclib.dumps( (func(*params),)
                                  , methodresponse=1
                                  , allow_none=True
                                   )
        except xmlrpclib.Fault, fault:
            body = xmlrpclib.dumps(fault)
        except:
            # report exception back to server
            body = xmlrpclib.dumps(
                xmlrpclib.Fault(1, "%s:%s" % (sys.exc_type, sys.exc_value))
                )

        return body
