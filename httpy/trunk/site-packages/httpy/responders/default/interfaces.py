from httpy._zope.interface import Interface
from httpy._zope.interface import Attribute

import httpy


class Iresponder(Interface):
    """A module that defines a Responder object.
    """

    Responder = Attribute('Responder', 'A class that implements IResponder')


class IResponder(httpy.interfaces.IResponder):
    """Represents a Responder within a tree on the filesystem.

    This interface is very close to the standard httpy IResponder interface,
    with the addition of the framework hooks and the added API.

    The data attributes described below are added to your responder dynamically
    when the server is starting up. This happens just prior to instantiation if
    your responder is a class, so you have this API in your constructor. If your
    responder already has attributes by these names, they are not overwritten.

        site_root   the filesystem root of the site in which the responder is
                      embedded
        site___     the site's magic directory
        root        the filesystem root of the responder
        __          the responder's magic directory
        uri         the URI path under which requests go to this responder
        pkg         the path that was inserted into sys.path for this responder


    """

    def respond(request):
        """Given a request, raise a response.

        The incoming request object will be whatever is emitted by
        IFramework.wrap_request, and this method can raise anything that can be
        meaningfully passed to IFramework.unwrap_response.

        Using the default framework, this means that request will be an
        httpy.Request object, and respond ought to raise an httpy.Response.
        Exceptions other than httpy.Response may also be raised; they will
        generate a '500 Internal Server Error' response.

        """


class Iframework(Interface):
    """A module that defines a Framework object.
    """

    Framework = Attribute('Framework', 'A class that implements IFramework')


class IFramework(Interface):
    """A class that defines a framework.

    As with IResponder above, there are two data attributes that are added
    magically if they aren't already present:

        root    the filesystem root of the site for which the framework obtains
        __      the site's magic directory

    If your framework is a class, these are added immediately before
    instantiation.

    """

    def wrap_request(responder, request):
        """Takes an IResponder and an IRequest.

        The object returned by this hook will be passed to your responders'
        respond method, so you can return anything meaningful to responders
        written for your framework.

        """


    def unwrap_response(responder, response):
        """Takes an IResponder and a framework-dependent response object.

        The object returned by this hook will be processed by httpy's outbound
        machinery, so you must return an IResponse implementation.

        """
