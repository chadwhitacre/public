from httpy._zope.interface import Interface
from httpy._zope.interface import Attribute

import httpy


class Iresponder(Interface):
    """A module that defines an Application object.
    """

    Responder = Attribute('Responder', 'A class that implements IResponder')


class IResponder(httpy.interfaces.IResponder):
    """Represents a Responder within a tree on the filesystem.

    The data attributes described below are added to your responder dynamically
    immediately following instantiation, when the server is starting up.

    """

    root_fs = Attribute('root_fs', 'The filesystem root of the responder.')
    root_uri = Attribute('root_uri', 'The URI root of the responder.')


    def respond(request):
        """Given a request, raise a response.

        The incoming request object will be whatever is emitted by
        IFramework.Request, and this method can raise anything that can be
        meaningfully passed to IFramework.Response.

        Using the default framework, this means that request will be an
        httpy.Request object, and respond ought to raise an httpy.Response.
        Exceptions other than httpy.Response may also be raised; they will
        generate a '500 Internal Server Error' response.

        """


class IFramework(Interface):
    """A class that defines a framework.
    """

    def wrap_request(responder, request):
        """Takes an IApp and an IRequest.

        The object returned by this hook will be passed to your responders'
        respond method, so you can return anything meaningful to responders
        written for your framework.

        """


    def unwrap_response(responder, response):
        """Takes an IApp and a framework-dependent response object.

        The object returned by this hook will be processed by httpy's outbound
        machinery, so you must return an IResponse implementation.

        """