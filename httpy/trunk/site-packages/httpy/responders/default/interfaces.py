from httpy._zope.interface import Interface
from httpy._zope.interface import Attribute
from httpy.interfaces import IResponder


class Iapp(Interface):
    """A module that defines an Application object.
    """

    App = Attribute('App', 'A class that implements IApp')


class IApp(IResponder):
    """Represents an application that wants to talk over HTTP.

    The data attributes described below are added to your app dynamically
    immediately following instantiation, when the server is starting up.

    """

    root = Attribute('', '')

    def respond(request):
        """Given a request, raise a response.

        The incoming request object will be whatever is emitted by
        IFramework.Request, and this method can raise anything that can be
        meaningfully passed to IFramework.Response.

        Using the default framework, this means that request will be an
        httpy.Request object, and respond ought to raise an httpy.Response.
        Exceptions other than httpy.Response may also be raised; they will
        generate a '500 Internal Server Error' response.

        """


class IFramework(Interface):
    """A module that defines a framework.
    """

    def wrap_request(app, request):
        """Takes an IApp and an IRequest.

        The object returned by this hook will be passed to your applications'
        respond method, so you can return anything meaningful to applications
        written for your framework.

        """


    def unwrap_response(app, response):
        """Takes an IApp and a framework-dependent response object.

        The object returned by this hook will be processed by httpy's outbound
        machinery, so you must return an IResponse implementation.

        """