"""This module implements an httpy application.

By implementing the basic case -- serving static files from the filesystem -- we
demonstrate how to construct an httpy application.

"""

import logging
import mimetypes
import rfc822
import os
import stat
import time

from httpy._zope.interface import implements, moduleProvides

from httpy import Response
from httpy.interfaces import IMixin


__all__ = ('App',)
__docformat__ = 'rest'


# Logging
# =======
logger = logging.getLogger('httpy.apps.static')


class Responder:

    implements(IMixin)

    def respond(self, request):
        self.serve_static(request)

    def serve_static(self, request):
        """Given a filesystem path and a timestamp, serve the resource.

        This is factored out for easier reuse. 'ims' stands for
        'If-Modified-Since'; this is an HTTP header used for caching. We
        honor this header in deployment mode only.

        """

        fs_path = uri_to_fs( self.site_root
                           , self.fs_root
                           , self.uri_root
                           , request.path
                           , defaults = ('index.html', 'index.htm')
                            )
        ims = request.message.get('If-Modified-Since', '')
        self.serve_static(fs_path, ims)


        # Get basic info from the filesystem and start building a response.
        # =================================================================

        mtime = os.stat(fs_path)[stat.ST_MTIME]
        content_type = mimetypes.guess_type(fs_path)[0] or 'text/plain'
        response = Response(200)


        # Support 304s, but only in deployment mode.
        # ==========================================

        if self.deploy_mode:
            if ims:
                mod_since = rfc822.parsedate(ims)
                last_modified = time.gmtime(mtime)
                if last_modified[:6] <= mod_since[:6]:
                    response.code = 304


        # Finish building the response and raise it.
        # ========================================

        response.headers['Last-Modified'] = rfc822.formatdate(mtime)
        response.headers['Content-Type'] = content_type
        if response.code != 304:
            response.body = file(fs_path, 'rb').read()
        raise response
