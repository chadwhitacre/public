import mimetypes
import rfc822
import os
import stat
import sys
import time

from httpy import Response
from httpy.utils import mode


class Responder:

    root = ''       # The document publishing root on the filesystem.
    defaults = None # A sequence of names to consider to be default resources.

    def __init__(self):
        """
        """
        self.root = os.getcwd()
        self.defaults = ['index.html', 'index.htm']


    def respond(self, request):
        """Serve a static file off of the filesystem.

        In staging and deployment modes, we honor any 'If-Modified-Since'
        header, an HTTP header used for caching.

        """

        fs_path = self.translate(request.path)
        fs_path = self.validate(request.path, fs_path)
        fs_path = self.find_default(fs_path)

        ims = request.headers.get('If-Modified-Since', '')


        # Get basic info from the filesystem and start building a response.
        # =================================================================

        stats = os.stat(fs_path)
        mtime = stats[stat.ST_MTIME]
        size = stats[stat.ST_SIZE]
        content_type = mimetypes.guess_type(fs_path)[0] or 'text/plain'
        response = Response(200)


        # Support 304s, but only in deployment mode.
        # ==========================================

        if mode.IS_DEPLOYMENT or mode.IS_STAGING:
            if ims:
                mod_since = rfc822.parsedate(ims)
                last_modified = time.gmtime(mtime)
                if last_modified[:6] <= mod_since[:6]:
                    response.code = 304


        # Finish building the response and return it.
        # ===========================================

        response.headers['Last-Modified'] = rfc822.formatdate(mtime)
        response.headers['Content-Type'] = content_type
        response.headers['Content-Length'] = size
        if response.code != 304:
            response.body = open(fs_path).read()
        return response


    def translate(self, uri_path):
        """Translate a requested URI to the filesystem.
        """
        _parts = [self.root] + uri_path.lstrip('/').split('/')
        fs_path = os.sep.join(_parts)
        fs_path = os.path.realpath(fs_path)
        return fs_path


    def validate(self, uri_path, fs_path):
        """Given a URI and a filesystem translation, return a path or raise 301.
        """
        if not os.path.exists(fs_path):
            raise Response(404)
        elif os.path.isdir(fs_path) and not uri_path.endswith('/'):
            new_location = '%s/' % uri_path
            response = Response(301)
            response.headers['Location'] = new_location
            raise response
        return fs_path


    def find_default(self, fs_path):
        """Given a path, return a filepath or raise 403.
        """
        if os.path.isdir(fs_path):
            default = None
            for name in self.defaults:
                _path = os.path.join(fs_path, name)
                if os.path.isfile(_path):
                    default = _path
                    break
            if default is None:
                raise Response(403)
            fs_path = default
        return fs_path


Static = Responder