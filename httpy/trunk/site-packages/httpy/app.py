"""This module implements an httpy application.

We implement the basic case: serving static files from the filesystem. In so
doing we demonstrate how to construct an httpy application.

"""

import mimetypes
import os
import stat

from httpy import log
from httpy.helpers import StaticMixin
from httpy.Response import Response


def configure(config):
    """Given a server configuration dictionary, return a dictionary.

    This method is called once for each request

    """
    config['defaults'] = ('index.html', 'index.htm')
    return config


class Transaction(StaticMixin):
    """This represents httpy's default application.
    """

    def __init__(self, config):
        """Takes a dictionary of configuration info.
        """
        self.config = configure(config)


    def process(self, request):
        """Given an httpy.Request, raise an httpy.Response.
        """

        self.set_path(request.path)
        path = self.config['path']

        mtime = os.stat(path)[stat.ST_MTIME]
        content_length = os.stat(path)[stat.ST_SIZE]

        if self.config['mode'] == 'deployment':

            ims = self.request.message.get('If-Modified-Since')

            length_match = True
            if ims:
                length = ims.group(4)
                if length:
                    try:
                        length = int(length)
                        if length != content_length:
                            length_match = False
                    except:
                        pass

            ims_date = False
            if ims:
                ims_date = http_date.parse_http_date(ims.group(1))

            if length_match and ims_date:
                if mtime <= ims_date:
                    raise NotModified


        # Build a response and raise it.
        # ==============================

        content_type = mimetypes.guess_type(path)[0] or 'text/plain'
        log(88, "content type for %s: %s" % (path, content_type))

        response = Response(200)
        #response.headers['Last-Modified'] = mtime
        response.headers['content-type'] = content_type
        response.body = open(path, 'rb').read()
        raise response


DefaultTransaction = Transaction
