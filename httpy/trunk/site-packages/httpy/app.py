"""This module implements a basic httpy application.

We implement the basic case: serving static files from the filesystem. In so
doing we demonstrate how to construct an httpy application.

We also provide a mixin class with useful API for more dynamic applications.

"""

from Cookie import SimpleCookie
from StringIO import StringIO
from urllib import unquote

from httpy import Endings
from httpy.Response import Response


def configure(config):
    """Given a server configuration dictionary, return a dictionary.
    """
    return config


class Transaction:
    """Serve a static file from the filesystem.
    """

    def __init__(self, config, request):
        self.config = config
        self.request = request
        self.set_path(request)


    def respond(self):

        mtime = os.stat(self.path)[stat.ST_MTIME]
        content_length = os.stat(self.path)[stat.ST_SIZE]

        if self.config.mode == 'deployment':

            ims = self.request.message.get('If-Modified-Since')

            length_match = True
            if ims:
                length = ims.group(4)
                if length:
                    try:
                        length = int(length)
                        if length != content_length:
                            length_match = False
                    except:
                        pass

            ims_date = False
            if ims:
                ims_date = http_date.parse_http_date(ims.group(1))

            if length_match and ims_date:
                if mtime <= ims_date:
                    raise NotModified


        # Set headers and return content.
        # ===============================

        content = open(request.path, 'rb').read()

        request['Last-Modified'] = http_date.build_http_date(mtime)
        request['Content-Length'] = content_length
        request['Content-Type'] = guess_type(request.path)[0] or 'text/plain'

        return content


    def set_path(self, request):
        """Translate the URI path into a filesystem path at self.path.

        This method can trigger the following Endings:

            MovedPermanently
            BadRequest
            Forbidden
            NotFound

        """

        # Tidy up the path.
        # =================

        path = request.path
        path = os.path.join(self.config.root, path.lstrip('/'))
        path = os.path.realpath(path)
        if not path.startswith(self.config.root):
            # protect against '../../../../../../../../../../etc/master.passwd'
            raise Endings.BadRequest
        if self.config.__ and path.startswith(self.config.__):
            # disallow access to our magic directory
            raise Endings.NotFound


        # Determine if the requested directory or file can be served.
        # =============================================================
        # If the path points to a directory, look for a default resource.
        # If it points to a file, see if the file exists.

        if os.path.isdir(path):
            if not request.uri.endswith('/'):
                # redirect directory requests to trailing slash
                new_location = '%s/' % request.uri
                raise Endings.MovedPermanently(new_location)
            found = False
            for name in self.defaults:
                _path = os.path.join(path, name)
                if os.path.isfile(_path):
                    found = True
                    path = _path
                    break
            if not found:
                raise Endings.Forbidden
        else:
            if not os.path.exists(path):
                raise Endings.NotFound


        # We made it!
        # ===========

        self.path = path


class DynamicMixin:
    """This class provides API to help with requests for dynamic resources.

    While httpy.Request keeps close to the HTTP layer, any dynamic application
    will need to comprehend application-specific information encoded in the
    Request. The methods in this mixin represent such information as objects
    from the standard library, stored on the host Transaction.

        method      from (request)          to (self)   type
        =======================================================================
        set_query   uri['query']            query       cgi.FieldStorage
        set_cookie  message.get('Cookie')   cookie      Cookie.SimpleCookie
        set_post    raw_body                post        cgi.FieldStorage

    """

    def set_query(self, request):
        """Translate request's querystring into a FieldStorage at self.query.
        """

        fp = StringIO(request.querystring)

        headers = {}
        headers['content-type'] = request.message.get('content-type')
        headers['content-length'] = request.message.get('content-length')

        environ = {}
        environ['REQUEST_METHOD'] = request.method

        boundary = request.message.get('boundary')

        query = cgi.FieldStorage( fp = fp
                                , headers = headers
                                , outerboundary = boundary
                                , environ = environ
                                , keep_blank_values = True
                                , strict_parsing = False
                                 )

        self.query = query


    def set_cookie(self, request):
        """Translate request's cookie into a SimpleCookie at self.cookie.
        """
        raw_cookie = request.message.get('Cookie','')
        self.cookie = SimpleCookie(raw_cookie)


    def set_post(self, request):
        """Translate request's body into a FieldStorage at self.post.
        """

        fp = StringIO(request.raw_body)

        headers = {}
        headers['content-type'] = request.message.get('content-type')
        headers['content-length'] = request.message.get('content-length')

        environ = {}
        environ['REQUEST_METHOD'] = request.method

        boundary = request.message.get('boundary')

        post = cgi.FieldStorage( fp = fp
                               , headers = headers
                               , outerboundary = boundary
                               , environ = environ
                               , keep_blank_values = True
                               , strict_parsing = False
                                )

        self.post = post
