import re
from urlparse import urlsplit

from httpy import Statuses


# Precompile a regular expression.
# ================================

HTTP_VERSION = re.compile(r'^HTTP/(\d+)\.(\d+)$')


class Request:
    """An HTTP Request message.

        http://www.w3.org/Protocols/rfc2616/rfc2616-sec5.html

    """

    def __init__(self, stream):
        """This takes an incoming HTTP stream.
        """
        self.raw = []
        self.parse_line(stream)
        self.parse_headers(stream)
        self.parse_body(stream)


    def parse_line(self, stream):

        # Read the first line and split it.
        # =================================

        raw_line = stream.readline()
        line = raw_line.rstrip('/n').rstrip('/r')
        tokens = line.split()
        if len(tokens) == 3:
            method, uri, version = tokens
        elif len(tokens) == 2:
            method, uri = tokens
            version = 'HTTP/0.9'
        else:
            raise Statuses.BadRequest("The Request-Line `%s' appears " % line +
                                      "to be malformed because it has " +
                                      "neither two nor three tokens.")


        # Validate the method.
        # ====================

        if method not in ('GET', 'HEAD', 'POST'):
            raise Statuses.NotImplemented("This server does not implement " +
                                          "the `%s' method." % method)


        # Parse the URI into a dictionary.
        # ================================
        # We use the urlparse naming convention for the parts of the URI.
        # The path will be validated when we translate to a local resource.

        uri = urlsplit(uri)
        keys = ( 'scheme'
               , 'netloc'
               , 'path'
               , 'query'
               , 'fragment'
                )
        _uri = {}
        for i in range(len(uri)):
            k = keys[i]
            v = uri[i]
            _uri[k] = v
        uri = _uri


        # Validate the version.
        # =====================
        # Consider raising an HTTPVersionNotSupported here ... for 0.9? 2.0?

        m = HTTP_VERSION.match(version)
        if not m:
            raise Statuses.BadRequest("The HTTP-Version `%s' " % version +
                                      "appears to be malformed because " +
                                      "it does not match the pattern " +
                                      "`^HTTP/\d+\.\d+$'.")

        version_tuple = tuple([int(i) for i in m.groups()])


        # Store the most important info on self.
        # ======================================

        # raw line
        self.raw.append(raw_line)
        self.raw_line = line

        # tokens
        self.method = method
        self.uri = uri
        self.version = version

        # tertiary derivatives
        self.uri_path = uri['path']
        self.querystring = uri['query']
        self.version_tuple = version_tuple


    def parse_headers(self, stream):
        pass

    def parse_body(self, stream):
        pass
