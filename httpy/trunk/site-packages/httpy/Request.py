import mimetools

from httpy.StatusCodes import BadRequest, CloseConnection, HTTPVersionNotSupported

class Request:

    def __init__(self, stream):
        """Given a raw HTTP stream, initialize the request.
        """
        self.request_line = self._read_request_line(stream)
        self._parse_request_line(self.request_line)
        self.abs_path = self._parse_uri(self.uri)

        self._read_request_line(stream)
        self.message = mimetools.Message(stream)
        import pdb; pdb.set_trace()
        self.headers = self. dict(self.message.headers)

        # Decide whether to keep the connection alive when we are done.

        connection_type = self.headers.get('Connection', '').lower()
        if connection_type == 'close':
            self.keep_alive = False
        elif (connection_type == 'keep-alive' and
              self.http_version >= "HTTP/1.1"):
            self.keep_alive = True


    def _read_request_line(self, stream):
        """Given a new stream, read the first line up to the newline.
        """
        request_line = stream.readline()
        if request_line[-2:] == '\r\n':
            request_line = request_line[:-2]
        elif request_line[-1:] == '\n':
            request_line = request_line[:-1]
        return request_line


    def _parse_request_line(self, stream):

        # Set some defaults.
        method = None
        abs_path = '/'
        http_version = "HTTP/0.9"
        keep_alive = False

        words = request_line.split()
        if len(words) == 3:

            method, uri, http_version = words

            if http_version[:5] != 'HTTP/':
                raise BadRequest("Bad HTTP version: %r" % http_version)

            try:
                number = http_version.split('/', 1)[1]
                number = number.split(".")
                if len(number) != 2:
                    raise ValueError
                number = (int(number[0]), int(number[1]))
            except (ValueError, IndexError):
                raise BadRequest("Bad HTTP version: %r" % http_version)

            if number >= (1,1) and http_version >= "HTTP/1.1":
                keep_alive = True

            if number >= (2,0):
                raise HTTPVersionNotSupported("This server only supports " +
                                              "HTTP/1.x.")

        elif len(words) == 2: # HTTP/0.9
            method, uri = words
            if method != 'GET':
                raise BadRequest("Unsupported by HTTP/0.9: %r" % method)

        elif not words:
            raise CloseConnection()

        else:
            raise BadRequest("Bad request syntax: %r" % request_line)


        self.request_line = request_line
        self.method = method
        self.abs_path = abs_path
        self.http_version = http_version
        self.keep_alive = keep_alive
