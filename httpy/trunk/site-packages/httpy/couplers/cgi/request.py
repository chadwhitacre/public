import urlparse
from email import message_from_string

from httpy._zope.interface import implements
from httpy.interfaces import IRequest


class CGIRequest:
    """Reconstruct an httpy.Request from the environment and stdin.
    """

    implements(IRequest)

    def __init__(self, environ, stdin):
        """Takes a dictionary and a buffer.
        """

        # Request-Line
        # ============

        method = environ['REQUEST_METHOD']

        path = environ.get('PATH_INFO', '/')
        query = environ.get('QUERY_STRING', '')
        if query:
            query = '?' + query
        raw_uri = environ.get('SCRIPT_NAME', '') + path + query
        uri = urlparse.urlparse(raw_uri)
        keys = ( 'scheme'
               , 'netloc'
               , 'path'
               , 'parameters'
               , 'query'
               , 'fragment'
                )
        _uri = {}
        for i in range(len(uri)):
            k = keys[i]
            v = uri[i]
            _uri[k] = v
        uri = _uri

        http_version = environ['SERVER_PROTOCOL']

        raw_line = "%s %s %s\r\n" % (method, raw_uri, http_version)


        # Headers
        # =======

        headers = []
        WANT = ('content_type', 'content_length')
        for k, v in environ.iteritems():
            want = False
            k = k.lower()
            if k.startswith('http_'):
                k = k[5:]
                want = True
            if want or (k in WANT):
                as_string = "%s: %s" % (k.replace('_','-'), v)
                headers.append(as_string)
        raw_headers = '\r\n'.join(headers)
        raw_headers += '\r\n'
        headers = message_from_string(raw_headers)


        # Body
        # ====

        raw_body = stdin.read()


        # Save the API we want.
        # =====================

        raw = raw_line + raw_headers + raw_body

        self.raw = raw
        self.raw_line = raw_line
        self.raw_headers = raw_headers
        self.raw_body = raw_body

        self.method = method
        self.uri = uri
        self.path = path
        self.headers = headers
