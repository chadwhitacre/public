"""Implement a CGI coupler for httpy.
"""
import os
import sys
import urlparse
from email import message_from_string

from httpy.couplers.utils import Deliver
from httpy.request import Request, RequestPath


class CGIRequest:
    """Reconstruct an httpy.Request from the environment and stdin.
    """

    def __init__(self):

        # Request-Line
        # ============

        method = os.environ['REQUEST_METHOD']

        path = RequestPath(os.environ['SCRIPT_NAME'])
        path.info = os.environ.get('PATH_INFO', None)
        path.translated = os.environ.get('PATH_TRANSLATED', None)
        query = os.environ.get('QUERY_STRING', '')
        if query:
            query = '?' + query
        raw_uri = path + (path.info or '') + query
        uri = urlparse.urlparse(raw_uri)
        keys = ( 'scheme'
               , 'netloc'
               , 'path'
               , 'parameters'
               , 'query'
               , 'fragment'
                )
        _uri = {}
        for i in range(len(uri)):
            k = keys[i]
            v = uri[i]
            _uri[k] = v
        uri = _uri

        http_version = os.environ['SERVER_PROTOCOL']

        raw_line = "%s %s %s\r\n" % (method, raw_uri, http_version)


        # Headers
        # =======

        headers = []
        for k, v in os.environ.iteritems():
            k = k.lower()
            if k.startswith('http_'):
                as_string = "%s: %s" % (k[5:].replace('_','-'), v)
                headers.append(as_string)
        raw_headers = '\r\n'.join(headers)
        raw_headers += '\r\n'
        headers = message_from_string(raw_headers)


        # Body
        # ====

        raw_body = sys.stdin.read()


        # Save the API we want.
        # =====================

        raw = raw_line + raw_headers + raw_body

        self.raw = raw
        self.raw_line = raw_line
        self.raw_headers = raw_headers
        self.raw_body = raw_body

        self.method = method
        self.uri = uri
        self.path = path
        self.headers = headers


class Coupler:
    """A coupler for CGI deployments.
    """

    def __init__(self, responder):
        self.deliver = Deliver(self.make_request, responder, sys.stdout)

    def make_request(self):
        req = CGIRequest()
        print >> sys.stderr, req.__dict__.keys()
        return Request(req)

    def go(self):
        self.deliver()
