from httpy._zope.interface import implements
from httpy._zope.interface.verify import verifyObject

from httpy.interfaces import IRequest

class Request:
    """Represent an HTTP Request.

    The point of this class is to only expose the API we want to httpy
    responders. Instances of this class are what are actually passed to
    <responder>.respond(). See interfaces.IRequest.

    """

    def __init__(self, request):
        """Takes an IRequest provider.
        """

        verifyObject(IRequest, request, tentative=True)

        for attr in IRequest._InterfaceClass__attrs.keys(): # hack!
            if not attr.startswith('_'):
                val = getattr(request, attr)
                setattr(self, attr, val)

    def __repr__(self):
        return "<%s>" % self.raw_line
    __str__ = __repr__




import httpy
if httpy.mode.IS_DEVEL:

    import os
    import unittest
    from email.Message import Message

    from httpy._zope.interface.exceptions import BrokenImplementation
    from httpy._zope.server.adjustments import default_adj

    REQUEST_API = [ '__doc__'
                  , '__init__'
                  , '__module__'
                  , '__repr__'
                  , '__str__'
                  , 'headers'
                  , 'method'
                  , 'path'
                  , 'raw'
                  , 'raw_body'
                  , 'raw_headers'
                  , 'raw_line'
                  , 'uri'
                   ]


    class StubRequest:
        """A stub IRequest provider.
        """

        def __init__(self, **kwargs):

            self.raw = ''
            self.raw_line = ''
            self.raw_headers = ''
            self.raw_body = ''

            self.method = ''
            self.uri = {}
            self.path = ''
            self.headers = Message()

            for name, attr in kwargs.items():
                setattr(self, name, attr)


    class TestCase(unittest.TestCase):

        def testExtraAPIGetsStripped(self):
            stub = StubRequest(foo='bar')
            self.assert_(stub.foo == 'bar')

            request = Request(stub)
            expected = REQUEST_API
            actual = dir(request)
            self.assertEqual(expected, actual)

        def testNotEnoughAPIGetsRejected(self):
            for name in REQUEST_API:
                if name.startswith('_'):
                    continue
                stub = StubRequest()
                delattr(stub, name)
                self.assertRaises(BrokenImplementation, Request, stub)
