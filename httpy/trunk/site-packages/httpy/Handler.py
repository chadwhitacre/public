from SocketServer import StreamRequestHandler

from httpy import log
from httpy.HandlerRequestMixin import HandlerRequestMixin
from httpy.HandlerResponseMixin import HandlerResponseMixin
from httpy.Response import Response


class FasterStringIO:
    """This is borrowed from simpletal.SimpleTALUtils.
    """
    def __init__(self):
        self.data = []
    def write(self, datum):
        self.data.append(datum)
    def getvalue(self):
        return ''.join(self.data)


class Handler(StreamRequestHandler, HandlerRequestMixin, HandlerResponseMixin):
    """The SocketServer machinery instantiates this for each request.

    The mixins are factored out to make it easier to test, and for clerical
    sanity.

    """

    def handle(self):

        self.out = FasterStringIO()

        try:
            self.parse()            # HandlerRequestMixin
            self.process()          # HandlerRequestMixin
        except Response, response:
            self.respond(response)  # HandlerResponseMixin
        except:
            self.fail()             # HandlerResponseMixin

        print >> self.wfile, self.out.getvalue()
        import pdb; pdb.set_trace()




"""
TODO

range requests --> app, with handler fallback
keep alive --> handler


"""
