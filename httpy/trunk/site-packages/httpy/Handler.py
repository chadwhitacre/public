from SocketServer import StreamRequestHandler

from httpy import log
from httpy.HandlerRequestMixin import HandlerRequestMixin
from httpy.HandlerResponseMixin import HandlerResponseMixin


class FasterStringIO:
    """This is borrowed from simpletal.SimpleTALUtils.
    """
    def __init__(self):
        self.data = []
    def write(self, data):
        self.data.append (data)
    def getvalue(self):
        return ''.join(self.data)


class Handler(StreamRequestHandler, HandlerRequestMixin, HandlerResponseMixin):
    """The SocketServer machinery instantiates this for each request.

    The mixins are factored out to make it easier to test the individual
    methods, and for clerical sanity.

    """

    def handle(self):

        self.out = FasterStringIO()

        try:
            self.parse()
            self.process()
        except Response, response:
            self.end(response)
        except:
            self.fail()


    def parse(self):
        """Parse the request and store it in self.request_.

        We can't use self.request because it is used by a base class,
        SocketServer.BaseRequestHandler.

        """
        log(98, "Received a request.")
        self.request_ = Request(self.rfile)
        log(94, "Successfully parsed a request: %s" % self.request_.path)


    def process(self):
        """Execute one transaction.

        Transaction.process is expected to raise a Response or other exception.

        """
        self.transaction = self.get_transaction( self.server.config
                                               , self.request_.path
                                                )
        log(98, "Successfully instantiated a transaction.")
        self.transaction.process(self.request_)
        log(90, "%s.process did not raise anything." % str(self.transaction))
        raise Response(500)


    def end(self, response):
        try:
            raw_response = self.respond(response)
        except:
            raw_response = self.fail()
        self.wfile.write(raw_response)


"""
TODO

range requests --> app, with handler fallback
keep alive --> handler


"""
