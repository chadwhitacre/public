"""A handler under zope.server basically consists of a Task and a Channel.
"""

from zope.server.serverchannelbase import ServerChannelBase

from httpy import log
from httpy.HandlerRequestMixin import HandlerRequestMixin
from httpy.HandlerResponseMixin import HandlerResponseMixin
from httpy.Request import Request
from httpy.Response import Response


class Task(HandlerRequestMixin, HandlerResponseMixin):
    """The zope.server machinery instantiates this for each request.

    This gets its own thread. The mixins are factored out for testing and
    refactoring sanity.

    """

    def __init__(self, channel, request):
        self.server = channel.server
        self.channel = channel
        self.request = request

    def service(self):

        self.out = self.channel

        try:
            self.process()          # HandlerRequestMixin
        except Response, response:
            self.respond(response)  # HandlerResponseMixin
        except:
            self.fail()             # HandlerResponseMixin

        self.channel.close_when_done()


class Channel(ServerChannelBase, HandlerRequestMixin, HandlerResponseMixin):
    """The zope.server machinery instantiates this for each request.
    """
    task_class = Task
    parser_class = Request



"""
TODO

range requests --> app, with handler fallback
keep alive --> handler


"""
