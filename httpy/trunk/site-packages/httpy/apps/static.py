"""This module implements an httpy application.

By implementing the basic case -- serving static files from the filesystem -- we
demonstrate how to construct an httpy application.

"""

import logging
import mimetypes
import rfc822
import os
import stat
import time

from httpy._zope.interface import implements, moduleProvides

from httpy.interfaces import Iapp, IApplication
from httpy.Response import Response


moduleProvides(Iapp)

__all__ = ('App',)
__docformat__ = 'rest'


# Logging
# =======
logger = logging.getLogger('httpy.DefaultApp')


class App:
    """This is httpy's default request responder.
    """

    implements(IApplication)

    name = 'default httpy app'

    def __init__(self):
        from httpy import utils # dodge circular import -- still a problem?
        self.uri_to_fs = utils.uri_to_fs

    def __repr__(self):
        return "<%s>" % self.name
    __str__ = __repr__


    def respond(self, request):
        """Given an httpy.Request, raise an httpy.Response.
        """
        fs_path = self.uri_to_fs( self.site_root
                                , self.fs_root
                                , self.uri_root
                                , request.path
                                , defaults = ('index.html', 'index.htm')
                                 )
        ims = request.message.get('If-Modified-Since', '')
        self.serve_static(fs_path, ims)


    def serve_static(self, fs_path, ims):
        """Given a filesystem path and a timestamp, serve the resource.

        This is factored out for easier reuse. 'ims' stands for
        'If-Modified-Since'; this is an HTTP header used for caching. We
        honor this header in deployment mode only.

        """

        # Get basic info from the filesystem and start building a response.
        # =================================================================

        mtime = os.stat(fs_path)[stat.ST_MTIME]
        content_type = mimetypes.guess_type(fs_path)[0] or 'text/plain'
        response = Response(200)


        # Support 304s, but only in deployment mode.
        # ==========================================

        if self.deploy_mode:
            if ims:
                mod_since = rfc822.parsedate(ims)
                last_modified = time.gmtime(mtime)
                if last_modified[:6] <= mod_since[:6]:
                    response.code = 304


        # Finish building the response and raise it.
        # ========================================

        response.headers['Last-Modified'] = rfc822.formatdate(mtime)
        response.headers['Content-Type'] = content_type
        if response.code != 304:
            response.body = file(fs_path, 'rb').read()
        raise response


    def close(self):
        """This is here for completeness; it doesn't actually do anything.
        """
        logger.debug("closing DefaultApp")
