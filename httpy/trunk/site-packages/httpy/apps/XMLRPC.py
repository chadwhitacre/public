"""This module defines a mixin for building XMLRPC servers.

    >>>from httpy.XMLRPC import XMLRPCApplication
    >>>class Application(BaseApp):
    ...  def ping():
    ...    return 'pong'
    ...
    >>>

"""
from SimpleXMLRPCServer import SimpleXMLRPCDispatcher

from httpy.Response import Response


class Application(SimpleXMLRPCDispatcher):

    def __init__(self):
        SimpleXMLRPCDispatcher.__init__(self)
        self.register_instance(self)

    def respond(self, request):

        if request.method != 'POST':
            raise Response(501)
        else:
            response = Response(200)
            try:
                response.body = self._marshaled_dispatch(request.raw_body)
            except:
                # Bug in the module.
                raise Response(500)
            else:
                # Valid XMLRPC response.
                response.headers = {'Content-Type': 'text/xml'}
                raise response

    def _dispatch(self, method, params):
        """Dispatches the XML-RPC method.
        """

        if method.startswith('_'):
            raise AttributeError('attempt to access private attribute ' +
                                 '"%s"' % method)

        func = getattr(self, method)
        if func is not None:
            return func(*params)
        else:
            raise Exception('method "%s" is not supported' % method)


XMLRPCApplication = Application
