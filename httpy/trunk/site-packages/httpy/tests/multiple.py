import os
import sys

from httpy._zope.interface.exceptions import BrokenImplementation
from httpy._zope.interface.exceptions import BrokenMethodImplementation
from httpy.responders import Multiple, Static
from httpy.tests.TestCaseHttpy import TestCaseHttpy


class MULTIPLE(Multiple):
    def __init__(self):
        pass


class GetFramework(TestCaseHttpy):

    def testInit(self):
        mult = Multiple(self.siteroot)
        self.assert_(mult.root == self.siteroot)
        self.assert_(mult.__ is None)
        self.assert_(mult.framework is None)
        self.assert_(len(mult.responders) == 1)
        self.assert_(isinstance(mult.responders[0], Static))


    # get_framework
    # =============

    def testNonExistant(self):
        self.buildTestSite([('broomwork.py', '')])
        mult = Multiple(self.siteroot)
        expected = None
        actual = mult.framework
        self.assertEqual(expected, actual)


    # framework in root

    def testFromRoot(self):
        self.buildTestSite([('framework.py', '')])
        mult = Multiple(self.siteroot)
        expected = os.path.join(self.siteroot, 'framework.py')
        actual = mult.framework.__file__
        self.assertEqual(expected, actual)
        del sys.modules['framework']

    def testFromRootAPIRoot(self):
        self.buildTestSite([('framework.py', '')])
        mult = Multiple(self.siteroot)
        expected = self.siteroot
        actual = mult.framework.root
        self.assertEqual(expected, actual)
        del sys.modules['framework']

    def testFromRoot(self):
        self.buildTestSite([('framework.py', '')])
        mult = Multiple(self.siteroot)
        expected = None
        actual = mult.framework.__
        self.assertEqual(expected, actual)
        del sys.modules['framework']


    # framework in __

    def testFromMagicDirectory(self):
        self.buildTestSite(['__', ('__/framework.py', '')])
        mult = Multiple(self.siteroot)
        expected = os.path.join(self.siteroot, '__', 'framework.py')
        actual = mult.framework.__file__
        self.assertEqual(expected, actual)
        del sys.modules['framework']

    def testFromMagicDirectoryAPIRoot(self):
        self.buildTestSite(['__', ('__/framework.py', '')])
        mult = Multiple(self.siteroot)
        expected = self.siteroot
        actual = mult.framework.root
        self.assertEqual(expected, actual)
        del sys.modules['framework']

    def testFromMagicDirectoryAPI__(self):
        self.buildTestSite(['__', ('__/framework.py', '')])
        mult = Multiple(self.siteroot)
        expected = os.path.join(self.siteroot, '__')
        actual = mult.framework.__
        self.assertEqual(expected, actual)
        del sys.modules['framework']


    # root vs. __

    SITE0 = [  '__'
            , ('framework.py', '')
            , ('__/framework.py', '')
             ]

    def testRootTrumpsMagicDirectory(self):
        self.buildTestSite(self.SITE0)
        mult = Multiple(self.siteroot)
        expected = os.path.join(self.siteroot, 'framework.py')
        actual = mult.framework.__file__
        self.assertEqual(expected, actual)
        del sys.modules['framework']

    def testRootTrumpsMagicDirectoryAPIRoot(self):
        self.buildTestSite(self.SITE0)
        mult = Multiple(self.siteroot)
        expected = self.siteroot
        actual = mult.framework.root
        self.assertEqual(expected, actual)
        del sys.modules['framework']

    def testRootTrumpsMagicDirectoryAPI__(self):
        self.buildTestSite(self.SITE0)
        mult = Multiple(self.siteroot)
        expected = os.path.join(self.siteroot, '__')
        actual = mult.framework.__
        self.assertEqual(expected, actual)
        del sys.modules['framework']


    # framework is a class

    FRAMEWORK_0 = "class Framework: gotcha = True"
    FRAMEWORK_1 = "class Framework:\n  root = 'blam'\n  __ = 'yes'"

    def testClass(self):
        self.buildTestSite([('framework.py', self.FRAMEWORK_0)])
        mult = Multiple(self.siteroot)
        expected = True
        actual = mult.framework.gotcha
        self.assertEqual(expected, actual)
        del sys.modules['framework']

    def testClassAPIRoot(self):
        self.buildTestSite([('framework.py', self.FRAMEWORK_0)])
        mult = Multiple(self.siteroot)
        expected = self.siteroot
        actual = mult.framework.root
        self.assertEqual(expected, actual)
        del sys.modules['framework']

    def testClassAPI__(self):
        self.buildTestSite([('framework.py', self.FRAMEWORK_0)])
        mult = Multiple(self.siteroot)
        expected = None
        actual = mult.framework.__
        self.assertEqual(expected, actual)
        del sys.modules['framework']


    # attributes survive

    FRAMEWORK_2 = "root = 'blam'\n__ = 'yes'"

    def testAttributesSurviveRoot(self):
        self.buildTestSite([('framework.py', self.FRAMEWORK_2)])
        mult = Multiple(self.siteroot)
        expected = 'blam'
        actual = mult.framework.root
        self.assertEqual(expected, actual)
        del sys.modules['framework']

    def testAttributesSurvive__(self):
        self.buildTestSite([('framework.py', self.FRAMEWORK_2)])
        mult = Multiple(self.siteroot)
        expected = 'yes'
        actual = mult.framework.__
        self.assertEqual(expected, actual)
        del sys.modules['framework']

    def testAttributesSurviveClassRoot(self):
        self.buildTestSite([('framework.py', self.FRAMEWORK_1)])
        mult = Multiple(self.siteroot)
        expected = 'blam'
        actual = mult.framework.root
        self.assertEqual(expected, actual)
        del sys.modules['framework']

    def testAttributesSurviveClass__(self):
        self.buildTestSite([('framework.py', self.FRAMEWORK_1)])
        mult = Multiple(self.siteroot)
        expected = 'yes'
        actual = mult.framework.__
        self.assertEqual(expected, actual)
        del sys.modules['framework']



class AddAPI(TestCaseHttpy):

    def setUpUp(self):
        class RESPONDER:
            def respond(request):
                raise 'heck'
        self.RESPONDER = RESPONDER
        self.mult = Multiple(self.siteroot)

    def testBasic(self):
        self.mult.add_api(self.RESPONDER, self.siteroot, 'foo-path')
        expected = { 'site_root':self.siteroot
                   , 'site___':None
                   , 'root':self.siteroot
                   , '__':None
                   , 'uri':'/'
                   , 'pkg':'foo-path' # straight pass-through
                    }
        actual = self.RESPONDER.__dict__
        for k,v in expected.items():
            self.assertEqual(v, actual[k], "%s: %s != %s" % (k, v, actual[k]))

    def testResponderInRootMagicDir(self):
        self.mult.__ = os.path.join(self.siteroot, '__')
        self.mult.add_api( self.RESPONDER
                         , os.path.join(self.siteroot, '__')
                         , 'foo-path'
                          )
        expected = { 'site_root':self.siteroot
                   , 'site___':os.path.join(self.siteroot, '__')
                   , 'root':self.siteroot
                   , '__':os.path.join(self.siteroot, '__')
                   , 'uri':'/'
                   , 'pkg':'foo-path' # straight pass-through
                    }
        actual = self.RESPONDER.__dict__
        for k,v in expected.items():
            self.assertEqual(v, actual[k], "%s: %s != %s" % (k, v, actual[k]))

    def testResponderInSubDirectory(self):
        self.mult.add_api( self.RESPONDER
                         , os.path.join(self.siteroot, 'foo')
                         , 'foo-path'
                          )
        expected = { 'site_root':self.siteroot
                   , 'site___':None
                   , 'root':os.path.join(self.siteroot, 'foo')
                   , '__':None
                   , 'uri':'/foo'
                   , 'pkg':'foo-path' # straight pass-through
                    }
        actual = self.RESPONDER.__dict__
        for k,v in expected.items():
            self.assertEqual(v, actual[k], "%s: %s != %s" % (k, v, actual[k]))

    def testResponderKeepsExistingAPI(self):
        self.RESPONDER.root = 'blam'
        self.RESPONDER.site___ = 'fooey'
        self.mult.add_api(self.RESPONDER, self.siteroot, 'foo-path')
        expected = { 'site_root':self.siteroot
                   , 'site___':'fooey'
                   , 'root':'blam'
                   , '__':None
                   , 'uri':'/'
                   , 'pkg':'foo-path' # straight pass-through
                    }
        actual = self.RESPONDER.__dict__
        for k,v in expected.items():
            self.assertEqual(v, actual[k], "%s: %s != %s" % (k, v, actual[k]))



class SysPath(TestCaseHttpy):

    # from root

    def testRoot(self):
        self.buildTestSite()
        self.mult = Multiple(self.siteroot)
        self.mult.sys_path(self.siteroot)
        expected = self.siteroot
        self.assert_(expected in sys.path)
        sys.path.remove(expected)

    def testMagicDir(self):
        self.buildTestSite(('__',))
        self.mult = Multiple(self.siteroot)
        self.mult.sys_path(self.siteroot)
        expected = os.path.join(self.siteroot, '__')
        self.assert_(expected in sys.path)
        sys.path.remove(expected)

    def testLibTrumpsBase(self):
        self.buildTestSite(('lib','__'))
        self.mult = Multiple(self.siteroot)
        self.mult.sys_path(self.siteroot)
        expected = os.path.join(self.siteroot, 'lib')
        self.assert_(expected in sys.path)
        loser = os.path.join(self.siteroot, '__')
        self.assert_(loser not in sys.path)
        sys.path.remove(expected)

    def testSitePackagesTrumpsAll(self):
        self.buildTestSite(('site-packages', 'lib', '__'))
        self.mult = Multiple(self.siteroot)
        self.mult.sys_path(self.siteroot)
        expected = os.path.join(self.siteroot, 'site-packages')
        self.assert_(expected in sys.path)
        loser = os.path.join(self.siteroot, 'lib')
        self.assert_(loser not in sys.path)
        loser = os.path.join(self.siteroot, '__')
        self.assert_(loser not in sys.path)
        sys.path.remove(expected)


    # from magic dir

    def testInMagicDirMagicDirNope(self):
        self.buildTestSite(('__', '__/__'))
        self.mult = Multiple(self.siteroot)
        self.mult.sys_path(os.path.join(self.siteroot, '__'))
        expected = os.path.join(self.siteroot, '__')
        self.assert_(expected in sys.path)
        sys.path.remove(expected)

    def testInMagicDirLibTrumpsBase(self):
        self.buildTestSite(('__', '__/lib'))
        self.mult = Multiple(self.siteroot)
        self.mult.sys_path(os.path.join(self.siteroot, '__'))
        expected = os.path.join(self.siteroot, '__', 'lib')
        self.assert_(expected in sys.path)
        loser = os.path.join(self.siteroot, '__')
        self.assert_(loser not in sys.path)
        sys.path.remove(expected)

    def testInMagicDirSitePackagesTrumpsBoth(self):
        self.buildTestSite(('__', '__/site-packages', '__/lib'))
        self.mult = Multiple(self.siteroot)
        self.mult.sys_path(os.path.join(self.siteroot, '__'))
        expected = os.path.join(self.siteroot, '__', 'site-packages')
        self.assert_(expected in sys.path)
        loser = os.path.join(self.siteroot, '__', 'lib')
        self.assert_(loser not in sys.path)
        loser = os.path.join(self.siteroot, '__')
        self.assert_(loser not in sys.path)
        sys.path.remove(expected)



class LoadResponder(TestCaseHttpy):

    def setUpUp(self):
        self.mult = MULTIPLE()
        self.mult.root = 'foo'
        self.mult.__ = 'bar'

    def tearDownDown(self):
        if self.siteroot in sys.modules:
            del sys.modules[self.siteroot]

    MODULE = "def respond(request): raise heck"
    MODULE_NO_FUNCTION = "def resoon(request): raise heck"
    MODULE_BAD_FUNCTION = "def respond(zippy, yay): raise heck"

    CLASS = ("class Responder:\n def respond(self, request):\n  raise heck" +
             "\n gotcha=True")
    CLASS_NO_METHOD = "class Responder:\n def respoon(self, request):\n  pass"
    CLASS_BAD_METHOD = "class Responder:\n def respond(self):\n  raise heck"


    # responder is a module

    def testModuleGood(self):
        self.buildTestSite([('responder.py', self.MODULE)])
        expected = os.path.join(self.siteroot, 'responder.py')
        actual = self.mult.load_responder(self.siteroot).__file__
        self.assertEqual(expected, actual)

    def testModuleWithNoRespondMethod(self):
        self.buildTestSite([('responder.py', self.MODULE_NO_FUNCTION)])
        self.assertRaises( BrokenImplementation
                         , self.mult.load_responder
                         , self.siteroot
                          )

    def testModuleWithBadRespondFunction(self):
        self.buildTestSite([('responder.py', self.MODULE_BAD_FUNCTION)])
        self.assertRaises( BrokenMethodImplementation
                         , self.mult.load_responder
                         , self.siteroot
                          )


    # responder is a class

    def testClassGood(self):
        self.buildTestSite([('responder.py', self.CLASS)])
        expected = True
        actual = self.mult.load_responder(self.siteroot).gotcha
        self.assertEqual(expected, actual)

    def testClassWithNoRespondMethod(self):
        self.buildTestSite([('responder.py', self.CLASS_NO_METHOD)])
        self.assertRaises( BrokenImplementation
                         , self.mult.load_responder
                         , self.siteroot
                          )

    def testClassWithBadRespondMethod(self):
        self.buildTestSite([('responder.py', self.CLASS_BAD_METHOD)])
        self.assertRaises( BrokenMethodImplementation
                         , self.mult.load_responder
                         , self.siteroot
                          )

    # no responder

    def testNoResponder(self):
        self.buildTestSite()
        self.assertRaises( ImportError
                         , self.mult.load_responder
                         , self.siteroot
                          )
