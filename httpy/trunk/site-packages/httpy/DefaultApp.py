"""This module implements an httpy application.

By implementing the basic case -- serving static files from the filesystem -- we
demonstrate how to construct an httpy application.

"""

import mimetypes
import rfc822
import os
import stat
import time

from zope.interface import implements

from httpy.Response import Response
from httpy.interfaces import ITransaction
from httpy.utils import log, uri_to_fs


def configure(config):
    """Given a server configuration dictionary, return a dictionary.

    This method is called once for each request

    """
    config['defaults'] = ('index.html', 'index.htm')
    return config


class Transaction:
    """This is httpy's default request processor.
    """

    implements(ITransaction)


    def __init__(self, config):
        """Takes a dictionary of configuration info.
        """
        self.config = configure(config)


    def process(self, request):
        """Given an httpy.Request, raise an httpy.Response.
        """

        # Get basic info from the filesystem and start building a response.
        # =================================================================

        fs_path = uri_to_fs(self.config, request.path)
        mtime = os.stat(fs_path)[stat.ST_MTIME]
        content_type = mimetypes.guess_type(fs_path)[0] or 'text/plain'
        response = Response(200)


        # Support 304s, but only in deployment mode.
        # ==========================================

        if self.config['mode'] == 'deployment':
            ims = request.message.get('If-Modified-Since')
            if ims:
                mod_since = rfc822.parsedate(ims)
                last_modified = time.gmtime(mtime)
                if last_modified[:6] <= mod_since[:6]:
                    response.code = 304


        # Finish building the response and raise it.
        # ========================================

        response.headers['Last-Modified'] = rfc822.formatdate(mtime)
        response.headers['content-type'] = content_type
        if response.code != 304:
            response.body = file(fs_path, 'rb').read()
        raise response


DefaultTransaction = Transaction
