"""This module implements an httpy application.

By implementing the basic case -- serving static files from the filesystem -- we
demonstrate how to construct an httpy application.

"""

import mimetypes
import os
import stat

from zope.interface import implements

from httpy import log
from httpy.Response import Response
from httpy.utils import uri_to_fs
from httpy.interfaces import ITransaction


def configure(config):
    """Given a server configuration dictionary, return a dictionary.

    This method is called once for each request

    """
    config['defaults'] = ('index.html', 'index.htm')
    return config


class Transaction:
    """This is httpy's default request processor.
    """

    implements(ITransaction)


    def __init__(self, config):
        """Takes a dictionary of configuration info.
        """
        self.config = configure(config)


    def process(self, request):
        """Given an httpy.Request, raise an httpy.Response.
        """

        fs_path = uri_to_fs(self.config, request.path)

        mtime = os.stat(fs_path)[stat.ST_MTIME]
        content_length = os.stat(fs_path)[stat.ST_SIZE]

        if self.config['mode'] == 'deployment':

            ims = self.request.message.get('If-Modified-Since')

            length_match = True
            if ims:
                length = ims.group(4)
                if length:
                    try:
                        length = int(length)
                        if length != content_length:
                            length_match = False
                    except:
                        pass

            ims_date = False
            if ims:
                ims_date = http_date.parse_http_date(ims.group(1))

            if length_match and ims_date:
                if mtime <= ims_date:
                    raise NotModified


        # Build a response and raise it.
        # ==============================

        content_type = mimetypes.guess_type(fs_path)[0] or 'text/plain'
        log(88, "content type for %s: %s" % (fs_path, content_type))

        response = Response(200)
        #response.headers['Last-Modified'] = mtime
        response.headers['content-type'] = content_type
        response.body = open(fs_path, 'rb').read()
        raise response


DefaultTransaction = Transaction
