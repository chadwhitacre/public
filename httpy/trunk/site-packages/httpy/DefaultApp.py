"""This module implements an httpy application.

By implementing the basic case -- serving static files from the filesystem -- we
demonstrate how to construct an httpy application.

"""

import mimetypes
import rfc822
import os
import stat
import time

from httpy._zope.interface import implements, moduleProvides

from httpy.interfaces import IApp, IApplication
from httpy.Response import Response


moduleProvides(IApp)


class Application:
    """This is httpy's default request respondor.
    """

    implements(IApplication)


    def __init__(self):
        """Takes a ApplicationConfig object.
        """
        self.dev_mode = os.environ.get("HTTPY_MODE") == 'development'
        from httpy import utils # dodge circular import
        self.uri_to_fs = utils.uri_to_fs

    def __repr__(self):
        return "<default httpy app>"
    __str__ = __repr__


    def respond(self, request):
        """Given an httpy.Request, raise an httpy.Response.
        """
        self.request = request
        fs_path = self.uri_to_fs( self.site_root
                                , self.fs_root
                                , self.uri_root
                                , request.path
                                , defaults = ('index.html', 'index.htm')
                                 )
        self.serve_static(fs_path)


    def serve_static(self, fs_path):
        """Given a filesystem path to a static resource, serve it.
        """

        # Get basic info from the filesystem and start building a response.
        # =================================================================

        mtime = os.stat(fs_path)[stat.ST_MTIME]
        content_type = mimetypes.guess_type(fs_path)[0] or 'text/plain'
        response = Response(200)


        # Support 304s, but only in deployment mode.
        # ==========================================

        if not self.dev_mode:
            ims = self.request.message.get('If-Modified-Since')
            if ims:
                mod_since = rfc822.parsedate(ims)
                last_modified = time.gmtime(mtime)
                if last_modified[:6] <= mod_since[:6]:
                    response.code = 304


        # Finish building the response and raise it.
        # ========================================

        response.headers['Last-Modified'] = rfc822.formatdate(mtime)
        response.headers['Content-Type'] = content_type
        if response.code != 304:
            response.body = file(fs_path, 'rb').read()
        raise response


DefaultApplication = Application
