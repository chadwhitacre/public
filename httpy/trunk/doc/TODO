========================================
    0.8 -- AF_UNIX
========================================
finish docs (tex, man)
expose threads to configuration

support AF_UNIX

test our processing of different cases of configuration options
systematic tests for different server modes
tests for utils.parse*
run tests on Mac
test Task when respond doesn't raise anything

when restarting in the middle of pdb, terminal gets screwed up -- hrm
    see Server.RestartingServer.stop_child and TestCaseRestartingServer.py
RestartingServer ends up in infinite loop in some cases (removing files under its watch?)
RestartingServer should be thinner ... shouldn't instantiate Apps, e.g.
RestartingServer seems to miss _foo.py

headers should be case-preserved
consider moving API up a level -- from httpy.Response import Response --> from httpy import Response
site-packages -> lib?

how do I call security for every request when I have multiple applications? oops?
since I am not storing data in-site, it is crusty to have blog/__/app.py
    better to just have blog.py? or blog/index.py?
so maybe each site should only have one application (=request handler), and we should
    build *.py support right into httpy?
or what if we had a distinction between applications and applings
    application would, yes, be the main request handler, with security/error handling
    applings should all share security and error handling
    but each appling is where you implement MVC. so right now you do ...
        __/site-packages/foo/   model
        __/templates/foo.pt     view
        _styles/foo.css             view
        _scripts/foo.js              view
        foo.py              controller
    but wouldn't it be nicer if you could do ...
        __/site-packages/foo/   model
        foo/foo.pt              view
        foo/foo.css             view
        foo/foo.js              view
        foo/foo.py              controller
maybe app.Application --> responder.Responder? (to distinguish from flynn app)
=====DONE=====



========================================
    0.6 -- zope.server
========================================
transfer encoding
document apps
tests
make apps implicit rather than explicit
    change Config to auto-find apps by default -- can still be overriden
    also update Config tests to reflect the change
    shouldn't need to touch Server or Task since their input won't change
httpy.app.CGIMixin
supporting on-the-fly reloading of apps in dev mode
need to figure out how to sanely provide for alternate py libs
    answer: PYTHONPATH per daemontools -- configurable per site
    per-site lib
    per-app lib
    sys.path is not a simple solution since we have multiple apps -- what is the import order?
unittests!
refactor docs in Python style
remove __init__ requirement (don't always want to configure)
reconsider naming of Transaction given its meaning in persistence contexts
Transaction -> Application; persistent object
should allow any method
parse post to dict
add dev_mode to Application API
add a debug mode, which is dev mode + post-mortem
    deploy, develop, debug
raise Response(200, '') should give '', not "Request fulfilled, document follows"
raise Response(537, {}) should give '{}', not '<no output>'
ServerConfig --> Config
Exception --> StandardError
update to use zope 3.1.0 final
Task.find_app --> get_app
do we want traditional access logging? separate access and error logs?
    consider using logging from the std lib
    but maybe this just is app's job? answer: yes
consider using inspect rather than zope interfaces?
    interfaces gives us doc as well as constraint, and it's already there and working
app.py --> __init__.py? --> Application.py?
    __init__.py implies that the current dir is a package, which it isn't
    Application.py -- eh, too verbose :^P
on Windows, should always degrade to Server since RestartingServer won't work
signal handling
    TERM -- nice shutdown
    HUP -- reload config?
add close hook to Application
RestartingServer tries to kill a pid that isn't there
run tests on Windows again





========================================
    FUTURE
========================================
think systematically about hooks for Application
    consider exposing the Server to the Application
charsets (i18n)
keep-alive
range requests
think about how httpy could be used in stand-alone servers/applications
    i.e., one httpy instance per installation, rather than multiple sites per httpy
support interactive features, e.g.:
    ctrl-s -- display configuration settings
    ctrl-d -- toggle postmortem debugging
    ctrl-v -- set verbosity on the fly
add cli options to dump config and exit
play nice on Windows
    GUI?
    pyexe?


========================================
    0.2 -- STATIC
========================================
=====DONE=====
sensible error handling
get frame macro instead of template
configuration
    think through relationship of cli options, config, and env variables
        defaults -- can start httpy with no options, etc. and get something
    check to make sure site root exists on filesystem
    push all config checking up and out of init
write a make file
continue with unit tests
refactor into multiple modules, distutils + make
if frame.pt is empty, then frame should just be none
handle 500 better
400 -> 501
test error templates
ignore empty error template
test last resort
put tracebacks in error messages when in development mode
figure out daemontools


========================================
    0.4 -- DYNAMIC
========================================
=====DONE=====
write html docs
support something sane like CGI to provide context.py with it's API
manage sessions, post, querystring, cookies?
logging -- stdout :-) -- but support different verbosities
factor out medusa goofiness if possible
refactor for BaseHTTPServer -- no non-std lib dependencies!
separate error for each HTTP error? if not then why Redirect sep?
500 traceback should be in pre -- hardwire this into the message?
    the problem is that we also use message for redirects, which we don't
      necessarily want in pre, but on another level it doesn't matter cause
      noone ever sees that payload
factor out templating
need to import rather than execfile
    guessing its faster
    need persistence, e.g. for template caching
        import app rather than from app import Transaction
        then app.py can run whatever and it stays in memory
add apps to configuration
guess content type in response --> NO!!!!!!11
server string -> httpy
