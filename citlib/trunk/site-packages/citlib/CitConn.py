import socket

from citlib.utils import CitError, bitmap, bitbucket


class ROOM:
    config = ( 'QR_PERMANENT'
             , '<not used>'
             , 'QR_PRIVATE'
             , 'QR_PASSWORDED'
             , 'QR_GUESSNAME'
             , 'QR_DIRECTORY'
             , 'QR_UPLOAD'
             , 'QR_DOWNLOAD'
             , 'QR_VISDIR'
             , 'QR_ANONONLY'
             , 'QR_ANON2'
             , 'QR_NETWORK'
             , 'QR_PREFONLY'
             , 'QR_READONLY'
             , 'QR_MAILBOX'
              )
    config2 = ( 'QR2_SYSTEM'
              , 'QR2_SELFLIST'
               )
    access = ( 'UA_KNOWN'
             , 'UA_GOTOALLOWED'
             , 'UA_HASNEWMSGS'
             , 'UA_ZAPPED'
              )


class CitConn:
    """Represent a connection to a Citadel server.

    Our job here is to adapt the Citadel protocol to Python's data types, and
    the public API corresponds exactly to the Citadel protocol.

    """


    # Connection
    # ==========

    _sock = None

    def __init__(self, host='localhost', port=504, _listen=False):
        """Establish a connection to a Citadel server.
        """

        self._host = host
        self._port = port
        self._listen = _listen

        # connection code yanked from httplib
        for res in socket.getaddrinfo( host
                                     , port
                                     , 0
                                     , socket.SOCK_STREAM
                                      ):
            af, socktype, proto, canonname, sa = res
            try:
                self._sock = socket.socket(af, socktype, proto)
                self._sock.connect(sa)
            except socket.error, msg:
                if self._sock:
                    self._sock.close()
                self._sock = None
                continue
            break
        if not self._sock:
            return socket.error, msg


        # Put some convenient API on self.
        # ================================

        self._rfile = self._sock.makefile('rb', -1)   # buffered
        self._wfile = self._sock.makefile('wb', 0)    # unbuffered
        self._read = self._rfile.read
        self._readline = self._rfile.readline
        self._write = self._wfile.write


        # Read off the first line.
        # ========================

        c, v = self._parse(self._readline())
        if c != 200:
            return CitError("Error connecting to server: %s" % v[0])


    def __repr__(self):
        return "<citadel://%s:%s>" % (self._host, self._port)
    __str__ = __repr__



    # Helpers
    # =======

    def _req(self, msg):
        """Given a one-line message, return a parsed one-line response.

        The message to write may but needn't be terminated by a newline. The
        return value will be a two-tuple. The first element will be a three-
        tuple of integers representing the response code. The second element
        will be a tuple containing any values returned by the server.

        """
        if self._listen:
            print 'SEND: %s' % msg.rstrip('\n')
        if not msg.endswith('\n'):
            msg += '\n'
        self._write(msg)
        response = self._readline().rstrip('\n')
        return self._parse(response)


    def _parse(self, msg):
        """Given a one-line response from the server, parse it.
        """
        if self._listen:
            print 'RECV: %s' % msg
        msg = msg.rstrip('\n')
        _code, _vals = msg.split(' ', 1)
        #code_ = tuple(int(i) for i in list(str(_code)))
        code_ = int(_code)
        values = tuple(_vals.split('|'))
        return code_, values


    def _readlisting(self):
        """Read a listing off the wire.
        """
        listing = []
        rawline = self._readline()
        while rawline != '000\n':
            parsedline = self._parselisting(rawline)
            listing.append(parsedline)
            rawline = self._readline()
        return tuple(listing)


    def _parselisting(self, line):
        """Given a raw line, return a tuple.
        """
        line = line.rstrip('\n')
        if self._listen:
            print 'RECV: %s' % line
        if '|' in line:
            return tuple(line.split('|'))
        else:
            return line


    def _sendlisting(self, listing):
        """Given a listing, write it to the wire.
        """
        if isinstance(listing, basestring):
            listing = listing.splitlines(True)
        _listing = []
        for line in listing:
            line = str(line)
            if not line.endswith('\n'):
                line += '\n'
            _listing.append(line)
        listing = _listing
        for line in listing:
            self._write(line)
            if self._listen:
                print 'SEND: %s' % line.rstrip('\n')
        self._write("000\n")
        print 'SEND: 000'


    # Server Commands
    # ===============

    def CONF(self):
        """get or set global CONFiguration options
        """
        raise Exception(NotImplemented)

    def ECHO(self):
        """ECHO something
        """
        raise Exception(NotImplemented)

    def GTLS(self):
        """Get Transport Layer Security Status
        """
        raise Exception(NotImplemented)

    def IDEN(self):
        """IDENtify the client software
        """
        raise Exception(NotImplemented)

    def INFO(self):
        """get server INFO
        """
        raise Exception(NotImplemented)

    def IPGM(self):
        """identify as an Internal ProGraM
        """
        raise Exception(NotImplemented)

    def MRTG(self):
        """Multi Router Traffic Grapher
        """
        raise Exception(NotImplemented)

    def NETP(self):
        """authenticate as network session with connection NET Password
        """
        raise Exception(NotImplemented)

    def NOOP(self):
        """NO OPeration
        """
        raise Exception(NotImplemented)

    def QNOP(self):
        """Quiet No OPeration
        """
        raise Exception(NotImplemented)

    def QUIT(self):
        """QUIT
        """
        c, v = self._req("quit")
        assert c == 200
        self._sock.close()
        self._sock = None


    def REQT(self):
        """REQuest client Termination
        """
        raise Exception(NotImplemented)

    def STLS(self):
        """Start Transport Layer Security
        """
        raise Exception(NotImplemented)



    # User Commands
    # =============

    def AGUP(self):
        """Administrative Set User Parameters
        """
        raise Exception(NotImplemented)

    def ASUP(self):
        """Administrative Get User Parameters
        """
        raise Exception(NotImplemented)

    def CHEK(self):
        """CHEcK various things
        """
        raise Exception(NotImplemented)

    def CREU(self):
        """CREate new User account
        """
        raise Exception(NotImplemented)

    def EBIO(self):
        """Enter BIOgraphy
        """
        raise Exception(NotImplemented)

    def GETU(self):
        """GET User configuration
        """
        raise Exception(NotImplemented)

    def GNUR(self):
        """Get Next Unvalidated User
        """
        raise Exception(NotImplemented)

    def GREG(self):
        """Get REGistration for user
        """
        raise Exception(NotImplemented)

    def HCHG(self):
        """Hostname CHanGe
        """
        raise Exception(NotImplemented)

    def LBIO(self):
        """List users who have BIOs on file
        """
        raise Exception(NotImplemented)

    def LIST(self):
        """user LISTing
        """
        raise Exception(NotImplemented)


    def LOUT(self):
        """LogOUT
        """
        c, v = self._req("lout")
        assert c == 200


    def NEWU(self):
        """create NEW User account
        """
        raise Exception(NotImplemented)

    def PASS(self, password):
        """send PASSword

        Given a password, return a user record or return an error.

        """
        c, v = self._req("pass %s" % password)
        if c == 200:
            return v
        elif c == 540:
            raise CitError("Password required")
        elif c == 541:
            raise CitError("Already logged in")
        elif c == 542:
            raise CitError("Username required")


    def QUSR(self):
        """Query for a USeR
        """
        raise Exception(NotImplemented)

    def RBIO(self):
        """Read BIOgraphy
        """
        raise Exception(NotImplemented)

    def RCHG(self):
        """Roomname CHanGe
        """
        raise Exception(NotImplemented)

    def REGI(self):
        """send REGIstration
        """
        raise Exception(NotImplemented)

    def RWHO(self):
        """Read WHO's online
        """
        raise Exception(NotImplemented)

    def SETP(self):
        """SET new Password
        """
        raise Exception(NotImplemented)

    def SETU(self):
        """SET User configuration
        """
        raise Exception(NotImplemented)

    def STEL(self):
        """enter STEaLth mode
        """
        raise Exception(NotImplemented)

    def UCHG(self):
        """Username CHanGe
        """
        raise Exception(NotImplemented)

    def USER(self, username):
        """send USER name
        """
        c, v = self._req("user %s" % username)
        if c == 300:
            return
        elif c == 570:
            raise CitError("No such user: %s" % username)


    def VALI(self):
        """VALIdate user
        """
        raise Exception(NotImplemented)



    # Floor Commands
    # ==============

    def CFLR(self):
        """Create a new FLooR
        """
        raise Exception(NotImplemented)

    def EFLR(self):
        """Edit a FLooR
        """
        raise Exception(NotImplemented)

    def KFLR(self):
        """Kill a FLooR
        """
        raise Exception(NotImplemented)

    def LFLR(self):
        """List all known FLooRs
        """
        c, v = self._req("lflr")
        if c == 520:
            raise CitError("Not logged in")
        assert c == 100
        assert v == ('Known floors:',)
        return self._readlisting()



    # Room Commands
    # =============

    def CRE8(self):
        """CRE[ate] a new room
        """
        raise Exception(NotImplemented)

    def EINF(self):
        """Enter INFo file for room
        """
        raise Exception(NotImplemented)

    def FORG(self):
        """FORGet the current room
        """
        raise Exception(NotImplemented)

    def GETA(self):
        """GET room Aide
        """
        raise Exception(NotImplemented)

    def GETR(self):
        """GET Room attributes
        """
        raise Exception(NotImplemented)

    def GNET(self):
        """Set NETwork configuration for this room
        """
        raise Exception(NotImplemented)

    def SNET(self):
        """Set NETwork configuration for this room
        """
        raise Exception(NotImplemented)

    def GOTO(self):
        """GOTO a room
        """
        raise Exception(NotImplemented)

    def INVT(self):
        """INViTe a user to a room
        """
        raise Exception(NotImplemented)

    def KICK(self):
        """KICK a user out of a room
        """
        raise Exception(NotImplemented)

    def KILL(self):
        """KILL current room
        """
        raise Exception(NotImplemented)

    def LKRA(self):
        """List All Known Rooms
        """
        raise Exception(NotImplemented)

    def LZRM(self):
        """List Zapped RooMs
        """
        raise Exception(NotImplemented)


    def LKRN(self, floor=-1):
        """List Known Rooms with New messages
        """
        c, v = self._req("lkrn %d" % floor)
        if c != 100:
            raise CitError(c)
        rooms = []
        for raw in self._readlisting():
            room = [None] * 6
            room[0] = raw[0]
            room[1] = bitbucket(raw[1], ROOM.config)
            room[2] = bitbucket(raw[2], ROOM.config2)
            room[3] = int(raw[3])
            room[4] = int(raw[4])
            room[5] = bitbucket(raw[5], ROOM.access)
            rooms.append(room)
        return rooms


    def LPRM(self):
        """List all Public RooMs
        """
        raise Exception(NotImplemented)

    def LRMS(self):
        """List all accessible RooMS
        """
        raise Exception(NotImplemented)

    def NSYN(self):
        """Network SYNchronize room
        """
        raise Exception(NotImplemented)

    def RDIR(self):
        """Read room DIRectory
        """
        raise Exception(NotImplemented)

    def RINF(self):
        """read Room INFormation file
        """
        raise Exception(NotImplemented)

    def SETA(self):
        """SET room Aide
        """
        raise Exception(NotImplemented)

    def SETR(self):
        """SET Room attributes
        """
        raise Exception(NotImplemented)

    def SLRP(self):
        """Set Last-message-Read Pointer
        """
        raise Exception(NotImplemented)

    def VIEW(self):
        """set the VIEW for a room
        """
        raise Exception(NotImplemented)

    def WHOK(self):
        """WHO Knows room
        """
        raise Exception(NotImplemented)



    # Message Commands
    # ================

    def ASYN(self):
        """ASYNchronous message support
        """
        raise Exception(NotImplemented)

    def DELE(self, message):
        """DELEte a message

        Takes a message ID.

        """
        c, v = self._req("dele %d" % message)
        if c != 200:
            raise CitError(c)


    def EMSG(self):
        """Enter a system MeSsaGe
        """
        raise Exception(NotImplemented)


    def ENT0(self, *args, **kwargs):
        """ENTer message, mode 0
        """
        c, v = self._req("ent0 %d|%s|%d|%d|%s|%s|%d|%s|%s" % args)
        if c not in (400, 800):
            raise CitError(c)
        self._sendlisting(kwargs['message'])
        if c == 800:
            confirmation = self._readlisting()
            return confirmation


    def GPEX(self):
        """Get Policy for message EXpiration
        """
        raise Exception(NotImplemented)

    def GTSN(self):
        """GeT the list of SeeN messages
        """
        raise Exception(NotImplemented)

    def FSCK(self):
        """check message base reference counts
        """
        raise Exception(NotImplemented)

    def MESG(self):
        """read system MESsaGe
        """
        raise Exception(NotImplemented)

    def MOVE(self):
        """MOVE or copy a message to a different room
        """
        raise Exception(NotImplemented)


    def MSGS(self, scope='all', num='', search=0, headers=0):
        """get pointers to MeSsaGeS in this room
        """
        scope = scope.lower()
        if scope not in ('all', 'old', 'new', 'last', 'first', 'gt'):
            raise CitError("Bad scope: %s" % scope)
        if scope in ('last', 'first', 'gt') and not isinstance(num, int):
            raise CitError("Scope %s requires a number" % scope)
        else:
            num = str(num)
        c, v = self._req("msgs %s|%s|%d|%d" % (scope, num, search, headers))
        if c == 800:
            self._readlisting()
            raise Exception(NotImplemented)
        elif c != 100:
            raise CitError(c)
        return [int(i) for i in self._readlisting()]


    def MSG0(self):
        """read MeSsaGe, mode 0"""
        raise Exception(NotImplemented)

    def MSG1(self):
        """read MeSsaGe, mode 1
        """
        raise Exception(NotImplemented)

    def MSG2(self):
        """read MeSsaGe, mode 2
        """
        raise Exception(NotImplemented)

    def MSG3(self):
        """read MeSsaGe, mode 3 - internal command
        """
        raise Exception(NotImplemented)

    def MSG4(self):
        """read MeSsaGe, mode 4 - output in preferred MIME format
        """
        raise Exception(NotImplemented)

    def MSGP(self):
        """set MeSsaGe Preferred MIME format
        """
        raise Exception(NotImplemented)

    def OPNA(self):
        """OPeN Attachment
        """
        raise Exception(NotImplemented)

    def SEEN(self):
        """set or clear the SEEN flag for a message
        """
        raise Exception(NotImplemented)

    def SPEX(self):
        """Set Policy for message EXpiration
        """
        raise Exception(NotImplemented)

    def SRCH(self):
        """SeaRCH the message base
        """
        raise Exception(NotImplemented)



    # Instant Message Commands
    # ========================

    def DEXP(self):
        """Disable receiving instant messages
        """
        raise Exception(NotImplemented)

    def GEXP(self):
        """Get instant messages
        """
        raise Exception(NotImplemented)

    def PEXP(self):
        """Print instant messages
        """
        raise Exception(NotImplemented)

    def SEXP(self):
        """Send instant message
        """
        raise Exception(NotImplemented)



    # Chat Commands
    # =============

    def CHAT(self):
        """enter CHAT mode
        """
        raise Exception(NotImplemented)



    # Mail Commands
    # =============

    def AUTO(self):
        """AUTOcompletion of email addresses
        """
        raise Exception(NotImplemented)

    def IGAB(self):
        """Initialize Global Address Book
        """
        raise Exception(NotImplemented)

    def ISME(self):
        """find out if an e-mail address IS ME
        """
        raise Exception(NotImplemented)

    def QDIR(self):
        """Query global DIRectory
        """
        raise Exception(NotImplemented)

    def SMTP(self):
        """utility commands for the SMTP gateway
        """
        raise Exception(NotImplemented)



    # Calendar Commands
    # =================

    def ICAL(self):
        """Internet CALendaring commands
        """
        raise Exception(NotImplemented)



    # File Commands
    # =============

    def CLOS(self):
        """CLOSe the download file
        """
        raise Exception(NotImplemented)

    def DELF(self):
        """DELete a File
        """
        raise Exception(NotImplemented)

    def MOVF(self):
        """MOVe a File
        """
        raise Exception(NotImplemented)

    def NDOP(self):
        """Network Download OPen file
        """
        raise Exception(NotImplemented)

    def NETF(self):
        """NETwork send a File
        """
        raise Exception(NotImplemented)

    def NUOP(self):
        """Network Upload OPen file
        """
        raise Exception(NotImplemented)

    def OIMG(self):
        """Open an IMaGe file
        """
        raise Exception(NotImplemented)

    def OPEN(self):
        """OPEN a file for download
        """
        raise Exception(NotImplemented)

    def READ(self):
        """READ from the download file
        """
        raise Exception(NotImplemented)

    def UCLS(self):
        """CLoSe the Upload file
        """
        raise Exception(NotImplemented)

    def UIMG(self):
        """Upload an IMaGe file
        """
        raise Exception(NotImplemented)

    def UOPN(self):
        """OPeN a file for Uploading
        """
        raise Exception(NotImplemented)

    def WRIT(self):
        """WRITe to the upload file
        """
        raise Exception(NotImplemented)