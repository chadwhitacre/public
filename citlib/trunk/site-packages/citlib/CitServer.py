class CitServer:
    """This is a low-level representation of a Citadel server.
    Our job here is to adapt the Citadel protocol to Python's data types, and
    the public API corresponds exactly to the Citadel protocol.
    """


    # Server Commands
    # ===============
    def CONF(self):
        """get or set global CONFiguration options
        """
        raise NotImplemented

    def ECHO(self):
        """ECHO something
        """
        raise NotImplemented

    def GTLS(self):
        """Get Transport Layer Security Status
        """
        raise NotImplemented

    def IDEN(self):
        """IDENtify the client software
        """
        raise NotImplemented

    def INFO(self):
        """get server INFO
        """
        raise NotImplemented

    def IPGM(self):
        """identify as an Internal ProGraM
        """
        raise NotImplemented

    def MRTG(self):
        """Multi Router Traffic Grapher
        """
        raise NotImplemented

    def NETP(self):
        """authenticate as network session with connection NET Password
        """
        raise NotImplemented

    def NOOP(self):
        """NO OPeration
        """
        raise NotImplemented

    def QNOP(self):
        """Quiet No OPeration
        """
        raise NotImplemented

    def QUIT(self):
        """QUIT
        """
        raise NotImplemented

    def REQT(self):
        """REQuest client Termination
        """
        raise NotImplemented

    def STLS(self):
        """Start Transport Layer Security
        """
        raise NotImplemented



    # User Commands
    # =============
    def AGUP(self):
        """Administrative Set User Parameters
        """
        raise NotImplemented

    def ASUP(self):
        """Administrative Get User Parameters
        """
        raise NotImplemented

    def CHEK(self):
        """CHEcK various things
        """
        raise NotImplemented

    def CREU(self):
        """CREate new User account
        """
        raise NotImplemented

    def EBIO(self):
        """Enter BIOgraphy
        """
        raise NotImplemented

    def GETU(self):
        """GET User configuration
        """
        raise NotImplemented

    def GNUR(self):
        """Get Next Unvalidated User
        """
        raise NotImplemented

    def GREG(self):
        """Get REGistration for user
        """
        raise NotImplemented

    def HCHG(self):
        """Hostname CHanGe
        """
        raise NotImplemented

    def LBIO(self):
        """List users who have BIOs on file
        """
        raise NotImplemented

    def LIST(self):
        """user LISTing
        """
        raise NotImplemented

    def LOUT(self):
        """LogOUT
        """
        raise NotImplemented

    def NEWU(self):
        """create NEW User account
        """
        raise NotImplemented

    def PASS(self):
        """send PASSword
        """
        raise NotImplemented

    def QUSR(self):
        """Query for a USeR
        """
        raise NotImplemented

    def RBIO(self):
        """Read BIOgraphy
        """
        raise NotImplemented

    def RCHG(self):
        """Roomname CHanGe
        """
        raise NotImplemented

    def REGI(self):
        """send REGIstration
        """
        raise NotImplemented

    def RWHO(self):
        """Read WHO's online
        """
        raise NotImplemented

    def SETP(self):
        """SET new Password
        """
        raise NotImplemented

    def SETU(self):
        """SET User configuration
        """
        raise NotImplemented

    def STEL(self):
        """enter STEaLth mode
        """
        raise NotImplemented

    def UCHG(self):
        """Username CHanGe
        """
        raise NotImplemented

    def USER(self):
        """send USER name
        """
        raise NotImplemented

    def VALI(self):
        """VALIdate user
        """
        raise NotImplemented



    # Floor Commands
    # ==============
    def CFLR(self):
        """Create a new FLooR
        """
        raise NotImplemented

    def EFLR(self):
        """Edit a FLooR
        """
        raise NotImplemented

    def KFLR(self):
        """Kill a FLooR
        """
        raise NotImplemented

    def LFLR(self):
        """List all known FLooRs
        """
        raise NotImplemented



    # Room Commands
    # =============
    def CRE8(self):
        """CRE[ate] a new room
        """
        raise NotImplemented

    def EINF(self):
        """Enter INFo file for room
        """
        raise NotImplemented

    def FORG(self):
        """FORGet the current room
        """
        raise NotImplemented

    def GETA(self):
        """GET room Aide
        """
        raise NotImplemented

    def GETR(self):
        """GET Room attributes
        """
        raise NotImplemented

    def GNET(self):
        """Set NETwork configuration for this room
        """
        raise NotImplemented

    def SNET(self):
        """Set NETwork configuration for this room
        """
        raise NotImplemented

    def GOTO(self):
        """GOTO a room
        """
        raise NotImplemented

    def INVT(self):
        """INViTe a user to a room
        """
        raise NotImplemented

    def KICK(self):
        """KICK a user out of a room
        """
        raise NotImplemented

    def KILL(self):
        """KILL current room
        """
        raise NotImplemented

    def LKRA(self):
        """List All Known Rooms
        """
        raise NotImplemented

    def LZRM(self):
        """List Zapped RooMs
        """
        raise NotImplemented

    def LKRN(self):
        """List Known Rooms with New messages
        """
        raise NotImplemented

    def LPRM(self):
        """List all Public RooMs
        """
        raise NotImplemented

    def LRMS(self):
        """List all accessible RooMS
        """
        raise NotImplemented

    def NSYN(self):
        """Network SYNchronize room
        """
        raise NotImplemented

    def RDIR(self):
        """Read room DIRectory
        """
        raise NotImplemented

    def RINF(self):
        """read Room INFormation file
        """
        raise NotImplemented

    def SETA(self):
        """SET room Aide
        """
        raise NotImplemented

    def SETR(self):
        """SET Room attributes
        """
        raise NotImplemented

    def SLRP(self):
        """Set Last-message-Read Pointer
        """
        raise NotImplemented

    def VIEW(self):
        """set the VIEW for a room
        """
        raise NotImplemented

    def WHOK(self):
        """WHO Knows room
        """
        raise NotImplemented



    # Message Commands
    # ================
    def ASYN(self):
        """ASYNchronous message support
        """
        raise NotImplemented

    def DELE(self):
        """DELEte a message
        """
        raise NotImplemented

    def EMSG(self):
        """Enter a system MeSsaGe
        """
        raise NotImplemented

    def ENT0(self):
        """ENTer message, mode 0
        """
        raise NotImplemented

    def GPEX(self):
        """Get Policy for message EXpiration
        """
        raise NotImplemented

    def GTSN(self):
        """GeT the list of SeeN messages
        """
        raise NotImplemented

    def FSCK(self):
        """check message base reference counts
        """
        raise NotImplemented

    def MESG(self):
        """read system MESsaGe
        """
        raise NotImplemented

    def MOVE(self):
        """MOVE or copy a message to a different room
        """
        raise NotImplemented

    def MSGS(self):
        """get pointers to MeSsaGeS in this room
        """
        raise NotImplemented

    def MSG0(self):
        """read MeSsaGe, mode 0
        """
        raise NotImplemented

    def MSG1(self):
        """read MeSsaGe, mode 1
        """
        raise NotImplemented

    def MSG2(self):
        """read MeSsaGe, mode 2
        """
        raise NotImplemented

    def MSG3(self):
        """read MeSsaGe, mode 3 - internal command
        """
        raise NotImplemented

    def MSG4(self):
        """read MeSsaGe, mode 4 - output in preferred MIME format
        """
        raise NotImplemented

    def MSGP(self):
        """set MeSsaGe Preferred MIME format
        """
        raise NotImplemented

    def OPNA(self):
        """OPeN Attachment
        """
        raise NotImplemented

    def SEEN(self):
        """set or clear the SEEN flag for a message
        """
        raise NotImplemented

    def SPEX(self):
        """Set Policy for message EXpiration
        """
        raise NotImplemented

    def SRCH(self):
        """SeaRCH the message base
        """
        raise NotImplemented



    # Instant Message Commands
    # ========================
    def DEXP(self):
        """Disable receiving instant messages
        """
        raise NotImplemented

    def GEXP(self):
        """Get instant messages
        """
        raise NotImplemented

    def PEXP(self):
        """Print instant messages
        """
        raise NotImplemented

    def SEXP(self):
        """Send instant message
        """
        raise NotImplemented



    # Chat Commands
    # =============
    def CHAT(self):
        """enter CHAT mode
        """
        raise NotImplemented



    # Mail Commands
    # =============
    def AUTO(self):
        """AUTOcompletion of email addresses
        """
        raise NotImplemented

    def IGAB(self):
        """Initialize Global Address Book
        """
        raise NotImplemented

    def ISME(self):
        """find out if an e-mail address IS ME
        """
        raise NotImplemented

    def QDIR(self):
        """Query global DIRectory
        """
        raise NotImplemented

    def SMTP(self):
        """utility commands for the SMTP gateway
        """
        raise NotImplemented



    # Calendar Commands
    # =================
    def ICAL(self):
        """Internet CALendaring commands
        """
        raise NotImplemented



    # File Commands
    # =============
    def CLOS(self):
        """CLOSe the download file
        """
        raise NotImplemented

    def DELF(self):
        """DELete a File
        """
        raise NotImplemented

    def MOVF(self):
        """MOVe a File
        """
        raise NotImplemented

    def NDOP(self):
        """Network Download OPen file
        """
        raise NotImplemented

    def NETF(self):
        """NETwork send a File
        """
        raise NotImplemented

    def NUOP(self):
        """Network Upload OPen file
        """
        raise NotImplemented

    def OIMG(self):
        """Open an IMaGe file
        """
        raise NotImplemented

    def OPEN(self):
        """OPEN a file for download
        """
        raise NotImplemented

    def READ(self):
        """READ from the download file
        """
        raise NotImplemented

    def UCLS(self):
        """CLoSe the Upload file
        """
        raise NotImplemented

    def UIMG(self):
        """Upload an IMaGe file
        """
        raise NotImplemented

    def UOPN(self):
        """OPeN a file for Uploading
        """
        raise NotImplemented

    def WRIT(self):
        """WRITe to the upload file
        """
        raise NotImplemented

