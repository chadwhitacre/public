class CitError(Exception):
    """Represents an error in citlib.
    """

class Bucket:
    """A bucket for arbitrary data.
    """


def bitmap(n, size=14, keys=(), bucket=False):
    """Given a denary number, return a mapping.

    The mapping's keys will be decimal representations of each bit position;
    the values will be boolean object representations of the value at each
    position.

    This method takes three optional arguments:

        size    -- the number of positions in the bitmap
        keys    -- a tuple of strings to use as keys instead of the decimals
        bucket  -- if set to True, the return value will be a Bucket with
                     attributes instead of a mapping

    If len(keys) != size, ValueError is raised.

    """

    if not isinstance(n, int):
        if isinstance(n, basestring) and n.isdigit():
            n = int(n)
        else:
            raise TypeError("n must be an integer")
    if n < 0:
        raise ValueError("n must be positive")


    # Auto-generate keys if needed.
    # =============================

    if not keys:
        keys = []
        for i in range(size):
            _tmp = [0] * size
            _tmp[i] = 1
            decimal = int(''.join([str(i) for i in _tmp]), 2)
            keys.append(decimal)

    if len(keys) != size:
        raise ValueError("%d keys given, expected %d" % (len(keys), size))


    # Convert n to binary.
    # ====================
    # Props to http://www.daniweb.com/code/snippet285.html

    _n = n
    bits = ''
    while _n > 0:
        bits = str(_n % 2) + bits
        _n = _n >> 1
    if len(bits) > size:
        raise ValueError("%d will not fit in bitmap of size %d" % (n, size))
    bits = bits.zfill(size)


    # Now convert to a bitmap, and if asked for, a bucket.
    # ====================================================

    bitmap = {}
    for i in range(len(bits)):
        bitmap[keys[i]] = int(bits[i]) and True or False
    if not bucket:
        return bitmap
    else:
        bucket = Bucket()
        bucket.__dict__.update(bitmap)
        return bucket


def bitbucket(n, names):
    """Given a decimal number and list of names for each bit, return a Bucket.
    """
    return bitmap(n, len(names), names, bucket=True)

