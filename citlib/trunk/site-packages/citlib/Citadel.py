
class CitadelError(StandardError):
    pass




class Message:
    def __init__(self, cit):
        self.cit = cit
        self.messages = self.cit.


class Room:
    def __init__(self, cit):
        self.cit = cit
        self.rooms = MessageManager(cit)


class Floor:
    def __init__(self, cit):
        self.cit = cit

    def rooms(self, raw=False):
        if raw:
            return self.cit.LKRN()
        else:
            return [f[2] for f in self.cit.LFLR()]

    def __getattr__(self, name):
        """Return a floor object.
        """
        if name in self.floors():
            return Floor(self.cit, name)
        else:
            raise AttributeError(u"No known floor named %s" % name)




"""

cit = Citadel()
cit.login('whit537', 'secret')
cit.floors()
['Lobby','Etc.']
lobby = cit.Lobby
lobby.rooms()
['Mail','etc.']
lobby.Mail

"""


class Citadel:
    """Represent a citadel server.

    This offers a higher level of abstraction than CitConn.

    """


    def __init__(self, host=u'localhost', port=504)
        self.cit = CitConn(host, port)


    # Users.

    def login(self, username, password)
        self.cit.USER(username)
        self.cit.PASS(password)

    def logout(self):
        self.cit.LOUT()


    # Floors.

    def floors(self, raw=False):
        if raw:
            return self.cit.LFLR()
        else:
            return [f[2] for f in self.cit.LFLR()]

    def __getattr__(self, name):
        """Return a floor object.
        """
        if name in self.floors():
            return Floor(self.cit, name)
        else:
            raise AttributeError(u"No known floor named %s" % name)

