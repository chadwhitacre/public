if __name__ == '__main__':
    import framework

import unittest, os, pdb
from os.path import join, abspath, isdir
from StringIO import StringIO
from Binder.Binder import Binder

class TestNameD(unittest.TestCase):

    def setUp(self):
        # ready,...
        self.out = StringIO()
        self.cleanUp()

        # ...set,...
        os.mkdir('var')
        os.mkdir('output_path')
        self.binder = Binder(stdout=self.out)
        self.binder.output_path = abspath('output_path')
        self.master_path = join(self.binder.output_path,
                                'named.binder.master.conf')
        self.slave_path = join(self.binder.output_path,
                               'named.binder.slave.conf')

        # ... go!

    def tearDown(self):
        self.cleanUp()

    def cleanUp(self):
        # clean up our filesystem
        for directory in ('var','output_path'):
            if isdir(directory):
                test_dir = abspath(directory)
                for datafile in os.listdir(test_dir):
                    os.remove(join(test_dir, datafile))
                os.rmdir(test_dir)

    def testAddThree(self):
        # add three, then remove one, then add two more, then remove all

        ##
        # add three ...
        ##

        self.assertEqual(os.listdir(self.binder.var), [])
        self.binder.onecmd("add zetaweb.com")
        self.binder.onecmd("mk thedwarf.com")
        self.binder.onecmd("add")
        self.assertEqual(file(self.master_path).read(),"""\

// begin records generated by binder

zone "thedwarf.com" {
        type master;
        file "binder.zone";
};

zone "zetaweb.com" {
        type master;
        file "binder.zone";
};


// end records generated by binder
"""
        )
        self.assertEqual(file(self.slave_path).read(),"""\

// begin records generated by binder

zone "thedwarf.com" {
        type slave;
        file "binder.zone";
};

zone "zetaweb.com" {
        type slave;
        file "binder.zone";
};


// end records generated by binder
"""
        )


    def testRemoveOne(self):
        # add three ...
        self.binder.onecmd("add zetaweb.com")
        self.binder.onecmd("mk thedwarf.com")
        self.binder.onecmd("add")

        # check files
        self.assertEqual(os.listdir(self.binder.var), ['binder.dat'
                                                      ,'binder.dat.old'])
        self.assertEqual(os.listdir(self.binder.output_path)
                                   ,['named.binder.master.conf'
                                    ,'named.binder.slave.conf'])

        # ... then remove one ...
        self.binder.onecmd("rm zetaweb.com")
        self.assertEqual(file(self.master_path).read(),"""\

// begin records generated by binder

zone "thedwarf.com" {
        type master;
        file "binder.zone";
};


// end records generated by binder
"""
        )
        self.assertEqual(file(self.slave_path).read(),"""\

// begin records generated by binder

zone "thedwarf.com" {
        type slave;
        file "binder.zone";
};


// end records generated by binder
"""
        )


    def testAddTwoMore(self):
        # add three ...
        self.binder.onecmd("add zetaweb.com")
        self.binder.onecmd("mk thedwarf.com")
        self.binder.onecmd("add")

        # ... then remove one ...
        self.binder.onecmd("rm zetaweb.com")

        # (check our files)
        self.assertEqual(os.listdir(self.binder.var), ['binder.dat'
                                                      ,'binder.dat.old'])
        self.assertEqual(os.listdir(self.binder.output_path)
                                   ,['named.binder.master.conf'
                                    ,'named.binder.slave.conf'])

        # ... then add two more ...
        self.binder.onecmd("add malcontents.org duder 8020")
        self.binder.onecmd("mk christyanity.com duder 8020")
        self.assertEqual(file(self.master_path).read(),"""\

// begin records generated by binder

zone "christyanity.com" {
        type master;
        file "binder.zone";
};

zone "malcontents.org" {
        type master;
        file "binder.zone";
};

zone "thedwarf.com" {
        type master;
        file "binder.zone";
};


// end records generated by binder
"""
        )
        self.assertEqual(file(self.slave_path).read(),"""\

// begin records generated by binder

zone "christyanity.com" {
        type slave;
        file "binder.zone";
};

zone "malcontents.org" {
        type slave;
        file "binder.zone";
};

zone "thedwarf.com" {
        type slave;
        file "binder.zone";
};


// end records generated by binder
"""
        )


    def testRemoveAll(self):
        # add three ...
        self.binder.onecmd("add zetaweb.com")
        self.binder.onecmd("mk thedwarf.com")
        self.binder.onecmd("add")

        # ... then remove one ...
        self.binder.onecmd("rm zetaweb.com")

        # ... then add two more ...
        self.binder.onecmd("add malcontents.org")
        self.binder.onecmd("mk christyanity.com")

        # (check our files)
        self.assertEqual(os.listdir(self.binder.var), ['binder.dat'
                                                      ,'binder.dat.old'])
        self.assertEqual(os.listdir(self.binder.output_path)
                                   ,['named.binder.master.conf'
                                    ,'named.binder.slave.conf'])

        # ... then remove all!!
        self.binder.onecmd("rm christyanity.com malcontents.org")
        self.binder.onecmd("rm thedwarf.com")
        self.assertEqual(file(self.slave_path).read(),"""\

// begin records generated by binder


// end records generated by binder
"""
        )
        self.assertEqual(file(self.slave_path).read(),"""\

// begin records generated by binder


// end records generated by binder
"""
        )

def test_suite():
    from unittest import TestSuite, makeSuite
    suite = TestSuite()
    suite.addTest(makeSuite(TestNameD))
    return suite

if __name__ == '__main__':
    unittest.main()