if __name__ == '__main__':
    import framework

import unittest, os, pdb
from os.path import join, abspath, isdir
from StringIO import StringIO
from Porter.Porter import Porter

class TestNameD(unittest.TestCase):

    def setUp(self):
        # ready,...
        self.out = StringIO()
        self.cleanUp()

        # ...set,...
        os.mkdir('var')
        os.mkdir('gremlin')
        self.porter = Porter(stdout=self.out)
        self.porter.gremlin = abspath('gremlin')

        # ... go!

    def tearDown(self):
        self.cleanUp()

    def cleanUp(self):
        # clean up our filesystem
        for directory in ('var','gremlin'):
            if isdir(directory):
                test_dir = abspath(directory)
                for datafile in os.listdir(test_dir):
                    os.remove(join(test_dir, datafile))
                os.rmdir(test_dir)

    def testNamedConfFrag(self):
        # add three, then remove one, then add two more, then remove all
        #  include subdomains

        master_path = join(self.porter.gremlin,'named.porter.master.conf')
        slave_path = join(self.porter.gremlin,'named.porter.slave.conf')

        ##
        # add three ...
        ##

        self.assertEqual(os.listdir(self.porter.var), ['rewrite.db'])
        self.porter.onecmd("add zetaweb.com alpin 8010")
        self.porter.onecmd("mk thedwarf.com duder 8020")
        self.porter.onecmd("add very.malcontents.org duder 8020")
        self.assertEqual(file(master_path).read(),"""\

// begin records generated by porter

zone "very.malcontents.org" {
        type master;
        file "porter.zone";
};

zone "www.very.malcontents.org" {
        type master;
        file "porter.zone";
};

zone "thedwarf.com" {
        type master;
        file "porter.zone";
};

zone "www.thedwarf.com" {
        type master;
        file "porter.zone";
};

zone "zetaweb.com" {
        type master;
        file "porter.zone";
};

zone "www.zetaweb.com" {
        type master;
        file "porter.zone";
};


// end records generated by porter
"""
        )
        self.assertEqual(file(slave_path).read(),"""\

// begin records generated by porter

zone "very.malcontents.org" {
        type slave;
        file "porter.zone";
};

zone "www.very.malcontents.org" {
        type slave;
        file "porter.zone";
};

zone "thedwarf.com" {
        type slave;
        file "porter.zone";
};

zone "www.thedwarf.com" {
        type slave;
        file "porter.zone";
};

zone "zetaweb.com" {
        type slave;
        file "porter.zone";
};

zone "www.zetaweb.com" {
        type slave;
        file "porter.zone";
};


// end records generated by porter
"""
        )



        ##
        # ... then remove one ...
        ##

        self.assertEqual(os.listdir(self.porter.var), ['rewrite.db'
                                                      ,'rewrite.db.old'])
        self.assertEqual(os.listdir(self.porter.gremlin)
                                   ,['named.porter.master.conf'
                                    ,'named.porter.slave.conf'])
        self.porter.onecmd("rm zetaweb.com")
        self.assertEqual(file(master_path).read(),"""\

// begin records generated by porter

zone "very.malcontents.org" {
        type master;
        file "porter.zone";
};

zone "www.very.malcontents.org" {
        type master;
        file "porter.zone";
};

zone "thedwarf.com" {
        type master;
        file "porter.zone";
};

zone "www.thedwarf.com" {
        type master;
        file "porter.zone";
};


// end records generated by porter
"""
        )
        self.assertEqual(file(slave_path).read(),"""\

// begin records generated by porter

zone "very.malcontents.org" {
        type slave;
        file "porter.zone";
};

zone "www.very.malcontents.org" {
        type slave;
        file "porter.zone";
};

zone "thedwarf.com" {
        type slave;
        file "porter.zone";
};

zone "www.thedwarf.com" {
        type slave;
        file "porter.zone";
};


// end records generated by porter
"""
        )


        ##
        # ... then add two more ...
        ##

        self.assertEqual(os.listdir(self.porter.var), ['rewrite.db'
                                                      ,'rewrite.db.old'])
        self.assertEqual(os.listdir(self.porter.gremlin)
                                   ,['named.porter.master.conf'
                                    ,'named.porter.slave.conf'])
        self.porter.onecmd("add malcontents.org duder 8020")
        self.porter.onecmd("mk christyanity.com duder 8020")
        self.assertEqual(file(master_path).read(),"""\

// begin records generated by porter

zone "christyanity.com" {
        type master;
        file "porter.zone";
};

zone "www.christyanity.com" {
        type master;
        file "porter.zone";
};

zone "malcontents.org" {
        type master;
        file "porter.zone";
};

zone "very.malcontents.org" {
        type master;
        file "porter.zone";
};

zone "www.very.malcontents.org" {
        type master;
        file "porter.zone";
};

zone "www.malcontents.org" {
        type master;
        file "porter.zone";
};

zone "thedwarf.com" {
        type master;
        file "porter.zone";
};

zone "www.thedwarf.com" {
        type master;
        file "porter.zone";
};


// end records generated by porter
"""
        )
        self.assertEqual(file(slave_path).read(),"""\

// begin records generated by porter

zone "christyanity.com" {
        type slave;
        file "porter.zone";
};

zone "www.christyanity.com" {
        type slave;
        file "porter.zone";
};

zone "malcontents.org" {
        type slave;
        file "porter.zone";
};

zone "very.malcontents.org" {
        type slave;
        file "porter.zone";
};

zone "www.very.malcontents.org" {
        type slave;
        file "porter.zone";
};

zone "www.malcontents.org" {
        type slave;
        file "porter.zone";
};

zone "thedwarf.com" {
        type slave;
        file "porter.zone";
};

zone "www.thedwarf.com" {
        type slave;
        file "porter.zone";
};


// end records generated by porter
"""
        )


        ##
        # ... then remove all
        ##

        self.assertEqual(os.listdir(self.porter.var), ['rewrite.db'
                                                      ,'rewrite.db.old'])
        self.assertEqual(os.listdir(self.porter.gremlin)
                                   ,['named.porter.master.conf'
                                    ,'named.porter.slave.conf'])
        self.porter.onecmd("rm christyanity.com malcontents.org very.malcontents.org")
        self.porter.onecmd("rm thedwarf.com")
        self.assertEqual(file(slave_path).read(),"""\

// begin records generated by porter


// end records generated by porter
"""
        )
        self.assertEqual(file(slave_path).read(),"""\

// begin records generated by porter


// end records generated by porter
"""
        )

def test_suite():
    from unittest import TestSuite, makeSuite
    suite = TestSuite()
    suite.addTest(makeSuite(TestNameD))
    return suite

if __name__ == '__main__':
    unittest.main()