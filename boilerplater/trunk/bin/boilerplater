#!/usr/bin/env python
"""Boilerplater adds boilerplate to a tree of files.

Boilerplater's primary use case is maintaining copyright and licensing
information for a software project. The script always operates on the current
working directory, and it takes a single argument, which is one of the
following:

  -?/-h/--help
    Print this help message.

  -r/--report
    Output a comparison of filetypes in your tree compared with filetypes that
    boilerplater knows about.

  <filepath>
    Walk the current tree and apply the boilerplate found in the file at
    <filepath> to all files in the tree.

The power and convenience of boilerplater are in its smart application of your
boilerplate to various filetypes. That is, boilerplater adds boilerplate using
comment characters germane to a given filetype, and in a location in the file
suitable to the filetype.

If boilerplater doesn't know about a filetype in your tree, any files of that
type are silently ignored. By viewing the output of:

  $ boilerplater --report

You can anticipate any filetypes for which you may need to write additional
plugins. See the source for documentation on writing plugins.

"""
__version__ = '0.1'
__author__ = 'Chad Whitacre <chad [at] zetaweb [dot] com>'

import os
import sys
from sets import Set
from Boilerplater.Boilerplater import Boilerplater

if __name__ == '__main__':

    # Get the tree root and our argument.
    # ===================================

    root = os.path.realpath('.')
    arg = sys.argv[1:2]
    if not arg:
        print "Type 'boilerplater --help' for usage."
        sys.exit(2)
    arg = arg[0]


    # Instantiate and invoke Boilerplater.
    # ====================================

    boilerplater = Boilerplater(root)

    if arg in ('-?', '-h', '--help'):
        print __doc__
    elif arg in ('-r', '--report'):
        boilerplater.report()
    else:
        boilerplate = file(arg).read()
        boilerplater(boilerplate)
