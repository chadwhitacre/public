import os
import sys
import time
from sets import Set
import Plugins

class Boilerplater:

    def __init__(self, root):
        """
        """
        self.root = root

    def __call__(self, boilerplate):
        """Default behavior is to walk and add boilerplate.
        """
        sys.stdout.write('\nboilerplating ')
        sys.stdout.flush()
        _start = time.time()

        i = j = 0
        for path, dirs, files in os.walk(self.root):
            for filename in files:
                j += 1
                filepath = os.path.join(path, filename)
                Plugin = getattr(Plugins, self.ext(filepath), None)
                if Plugin is not None:
                    i += 1
                    sys.stdout.write('.')
                    sys.stdout.flush()
                    Plugin(filepath).update(boilerplate)
            if '.svn' in dirs: # skip Subversion directories
                dirs.remove('.svn')

        print " done\n\n%s files boilerplated in " % i +\
              "%.3f seconds, out of " % (time.time()-_start,) +\
              "%s total files.\n" % j

    def report(self):
        """But we can also print a comparison of extensions in the tree with
        extensions we know about.

        """

        # Get our info.
        # =============

        # first get the types from the tree
        tree = Set()
        for path, dirs, files in os.walk(self.root):
            for filename in files:
                filepath = os.path.join(path, filename)
                tree.add(self.ext(filepath))
            if '.svn' in dirs: # skip Subversion directories
                dirs.remove('.svn')

        # then get the types we know about
        known = Set()
        for ext in dir(Plugins):
            if not ext.startswith('_'):
                known.add(ext)

        # now do a full outer join
        all = list(tree|known)
        all.sort()
        joined = []
        for ext in all:
            a = (ext in tree) and ext or '-'
            b = (ext in known) and ext or '-'
            joined.append((a,b))



        # Write the report.
        # =================
        # The formatting is just random trial and error till it looked ok.

        width = 22 # total report width in characters
        w = width/2 # column width

        print
        print "     In Tree     Known About"
        print "="*(width+8)
        for row in joined:
            print "  %s  %s  " % ( row[0].rjust(w)[:w]
                                 , row[1].rjust(w)[:w]
                                  )
        print

    def ext(self, filepath):
        """This utility gets the file extension with no dot from a filename, or
        the filename in the absence of an extension.
        """
        head, tail = os.path.split(filepath)
        parts = tail.split('.')
        if len(parts) == 1:
            ext = parts[0]
        else:
            ext = parts[-1]
        return ext
