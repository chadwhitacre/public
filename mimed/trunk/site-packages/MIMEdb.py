#!/usr/bin/env python
"""This module defines objects for working with MIMEdb's.
"""
from xmlrpclib import ServerProxy


class _MethodWithToken:
    """Represent a callable on an XMLRPC server that requires an auth token.
    """

    def __init__(self, method, token):
        """Takes a callable, and a string.
        """
        self.__method = method
        self.__token = token

    def __call__(self, *args):
        """Override to add the auth token as the first argument to the call.
        """
        args = (self.__token,) + args
        return self.__method(*args)


class MIMEdb:
    """Represent a MIMEdb.
    """

    def __init__(self, uri, key):
        """Takes the URI of the MIMEdb server, and a master key.
        """
        self.__proxy = ServerProxy(uri)
        self.__key = key
        self.__uri = uri

    def __repr__(self):
        return "MIMEdb at %s" % self.__uri
    __str__ = __repr__

    def __getattr__(self, attr):
        """Calls dealing with catalogs are prefixed with 'c_'.
        """
        attr = 'c_%s' % attr
        base_method = getattr(self.__proxy, attr)
        return _MethodWithToken(base_method, self.__key)


class Catalog:
    """Represent a single MIMEdb catalog.
    """

    def __init__(self, uri, cid):
        """Takes the URI of the MIMEdb server, and a cid.
        """
        self.__proxy = ServerProxy(uri)
        self.__uri = uri
        self.__cid = cid

    def __repr__(self):
        return "Catalog at %s%s" % (self.__uri, self.__cid)
    __str__ = __repr__

    def __getattr__(self, attr):
        """Calls dealing with messages are prefixed with 'm_'.
        """
        attr = 'm_%s' % attr
        base_method = getattr(self.__proxy, attr)
        return _MethodWithToken(base_method, self.__cid)



# test
# ====

if __name__ == '__main__':
    url = 'http://philip:5370/'

    raw = ServerProxy(url)
    print raw.echo('Greetings, program!')

    key = 'a6d9b24e496c4255928b987995ac88b5'
    db = MIMEdb(url, key)

    cid = db.create()
    cat = Catalog(url, cid)
    print cat

    from pprint import pprint as pp; import code; code.interact(local=locals())


"""
        if isinstance(msg, basestring):
            pass
        elif isinstance(msg, Message):
            fp = StringIO()
            g = Generator(fp, mangle_from_=False, maxheaderlen=0)
            g.flatten(msg)
            msg = fp.getvalue()
"""