import Queue
import optparse
import os
import signal
import socket
import sys
import threading
import time
import traceback

from zeta.index.Client import Client


class _Server:
    """Provides the zeta indexing service.

    This server uses a pool of threads to service requests.

    """

    def __init__(self, hostname='', port=53700, threadcount=1):

        # Configure the server.
        # =====================
        self.parse_options()

        # Connect to our socket.
        # ======================
        self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        self.socket.bind((hostname, port))
        self.socket.listen(5)

        # Set up threads.
        # ===============
        self.SHUTDOWN = object()
        self.threads = {}
        self.queue = Queue.Queue()
        self.fill_thread_pool(threadcount)

        # Set up signal handling.
        # =======================
        self.DIE = threading.Event()
        signal.signal(signal.SIGINT, self.signal_handler)
        signal.signal(signal.SIGTERM, self.signal_handler)


    # Configuration
    # =============

    def parse_options(self):
        parser_ = optparse.OptionParser()
        parser_.add_option('-a', '--address', dest = 'address', type = 'str')
        parser_.add_option('-p', '--port', dest = 'port', type = 'int')
        parser_.add_option('-f', '--pidfile', dest = 'pidfile', type = 'str')
        parser_.add_option('-l', '--log', dest = 'log', type = 'str')
        parser_.add_option('-s', '--storage', dest = 'storage', type = 'str')
        parser_.add_option('-t', '--threads', dest = 'threads', type = 'int')
        parser_.set_defaults( address = '127.0.0.1'
                            , port = 53700
                            , pidfile = 'zetaindex.pid'
                            , log = 'zetaindex.log'
                            , threads = 1
                             )
        self.options, args = parser_.parse_args()


    # Public API
    # ==========

    def start(self):
        """Start the server.

        The server is actually run in a second thread, so that the main thread
        is free to listen for signals.

        """
        deputy = threading.Thread(target = self.deputy)
        deputy.start()
        while True:
            # Kick our feet up and watch for signals.
            time.sleep(1000000)

    def stop(self):
        print 'shutting down...'
        threads = self.threads.values()
        for i in range(len(threads)):
            self.queue.put(self.SHUTDOWN)
        for thread in threads:
            thread.join()
        self.socket.close()
        print 'done!'
        sys.exit(0)


    # Threads
    # =======

    def fill_thread_pool(self, threadcount):
        """Given the number of threads to create, create them.
        """
        for i in range(threadcount):
            thread_ = threading.Thread( target=self.worker
                                      , args=(i,)
                                       )
            self.threads[i] = thread_
            thread_.start()

    def deputy(self):
        """Take requests off the wire and hand them off to work threads.
        """
        print 'starting!'
        while not self.DIE.isSet():
            try:
                work = self.socket.accept()
            except socket.error:
                return
            self.queue.put(work)
        print 'ended infinite loop'

    def worker(self, thread_id):
        """Given a thread id, work, work, work.
        """
        while True:
            work = self.queue.get()
            if work is self.SHUTDOWN:
                break
            else:
                request, client_address = work
                try:
                    self.serve_request(request, client_address)
                finally:
                    request.close()

    # buffering per SocketServer.StreamRequestHandler
    rbufsize = -1
    wbufsize = 0

    def serve_request(self, request, client_address):
        """This is where the work actually gets done.
        """
        rfile = request.makefile('rb', self.rbufsize)
        wfile = request.makefile('wb', self.wbufsize)

        try:
            self.process(rfile, wfile)
        except:
            print (u"Failed to service request from " +
                   u"%s:%d." % client_address)
            print traceback.format_exc()

        if not wfile.closed:
            wfile.flush()
        wfile.close()
        rfile.close()


    # Signal Handling
    # ===============

    def signal_handler(self, signal, frame):
        signals = {2:'SIGINT', 15:'SIGTERM'}
        print 'zetaindex got %s' % signals[signal]
        print 'killing the deputy thread'
        self.DIE.set()
        self.stop()



class Server(_Server):

    PROTOCOL = ( 'ECHO'
               ,
                )

    _listen = False

    def process(self, rfile, wfile):
        """
        """
        self._rfile = rfile
        self._wfile = wfile

        self._write("200 Ok.\n")

        while True:
            command, arguments = self._get_request()
            if command in self.PROTOCOL:
                method = getattr(self, command)(arguments)


    # Extend base file API to support listening.
    # ==========================================

    def _read(self, size=-1):
        msg = self._rfile.read(size)
        if self._listen:
            sys.stdout.write("RECV: %s" % msg)
        return msg

    def _readline(self, size=-1):
        line = self._rfile.readline(size)
        if self._listen:
            sys.stdout.write("RECV: %s" % line)
        return line

    def _write(self, msg):
        if self._listen:
            sys.stdout.write("SEND: %s" % msg)
        self._wfile.write(msg)



    # Helpers
    # =======

    def _get_request(self):
        """Read a request off the wire and parse it into command and arguments.
        """
        request = self._readline().rstrip('\n')
        request = request.rstrip('\n')
        return request.split(' ', 1)

    def _readlisting(self, trim_endings=False):
        """Read a listing off the wire.
        """
        listing = []
        rawline = self._readline()
        while rawline != '000\n':
            parsedline = self._parselisting(rawline, trim_endings)
            listing.append(parsedline)
            rawline = self._readline()
        return tuple(listing)

    def _parselisting(self, line, trim_endings=False):
        """Given a raw line, return a list of values, or a single value.
        """
        if trim_endings:
            line = line.rstrip('\n')
        if '|' in line:
            return line.split('|')
        else:
            return line

    def _sendlisting(self, listing):
        """Given a listing, write it to the wire.

        This takes either a string or a list of lines.

        """
        if isinstance(listing, basestring):
            listing = listing.splitlines(True)
        for line in listing:
            line = unicode(line)
            if not line.endswith('\n'):
                line += '\n'
            self._write(line)
        self._write("000\n")


    # Protocol
    # ========

    def ECHO(self, msg):
        """ECHO
        """
        if not msg.endswith('\n'):
            msg += '\n'
        self._write("200 %s" % msg)




if __name__ == '__main__':
    server = Server()
    server._listen = True
    server.start()


