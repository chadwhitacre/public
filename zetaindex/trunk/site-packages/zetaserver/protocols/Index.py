"""This module implements the zetaindex protocol.

We have both server and client implementations in here.

"""

import os

from zetaserver.protocols import Protocol


DB_ROOT = '/'.join(('', 'var', 'db', 'zetaindex'))
if not os.path.isdir(DB_ROOT):
    os.makedirs(DB_ROOT)


class Server(Protocol.Server):
    """This is a server implementation of the zetaindex protocol.
    """

    API = ( 'AUTH'
          , 'ECHO'
          , 'FIND'
          , 'INDX'
          , 'NOOP'
          , 'QUIT'
           )

    authenticated = False
    index = ''

    def check_auth(self):
        if not self.authenticated:
            self.write("500 Not authenticated.")
            raise Protocol.EndRequest

    def opendb(self, name):
        """Given a name, open an index. Create if necessary.
        """
        conn = so.connectionForURI("sqlite:///var/db/zetaindex/%s" % name)
        db = so.sqlhub.processConnection(conn)


    def authenticate(self, arg):
        """Given a single argument, return either 200 or 210.

        The single argument is an authentication token. We assume a one to one
        correlation of authentication tokens to indices.

        """
        self.authenticated = True # not actually checking auth credentials :-)
        name = arg
        if name in os.listdir(DB_ROOT):
            self.opendb(name)
            self.write('200 Authentication succeeded.')
        else:
            self.opendb(name)
            self.write('210 Index created.')


    def INDX(self, args):
        self.check_auth()
        self.write('200 INDX!')

    def FIND(self, args):
        self.check_auth()
        self.write('200 FIND!')

    def NOOP(self, args):
        self.check_auth()
        self.write("200 Ok.")



class Client(Protocol.Client):
    """This is a client implementation of the zetaindex protocol.
    """

    def AUTH(self, identifier):
        """AUTHorize
        """
        c, v = self.get_response(u"AUTH %s" % identifier)
        assert c == 200

    def NOOP(self):
        """NOOP
        """
        c, v = self.get_response(u"NOOP")
        assert c == 200
