import socket
import sys

from zetaserver.utils import ClientError


class Client:
    """Represent a connection to a TCP server.

    The only required parameter is a Protocol class defining the protocol for
    the server we are talking to.

    The Protocol class will be instantiated once for each connection
    established. The arguments to the constructor are the inbound stream and the
    outbound stream. It is called immediately after instantiation.

    """

    socket = None
    scheme = "client"

    def __init__(self, Protocol, host='localhost', port=5370):
        """Establish a connection to a <Protocol> server.
        """

        self.host = host
        self.port = port

        # connection code yanked from httplib
        for res in socket.getaddrinfo( host
                                     , port
                                     , 0
                                     , socket.SOCK_STREAM
                                      ):
            af, socktype, proto, canonname, sa = res
            try:
                self.socket = socket.socket(af, socktype, proto)
                self.socket.connect(sa)
            except socket.error, msg:
                if self.socket:
                    self.socket.close()
                self.socket = None
                continue
            break
        if not self.socket:
            raise socket.error, msg


        # Convert our socket to a file API.
        # =================================

        rfile = self.socket.makefile('rb', -1)   # buffered
        wfile = self.socket.makefile('wb', 0)    # unbuffered


        # Hand off to the implementation.
        # ===============================

        self.protocol = Protocol(rfile, wfile)
        self.protocol()


    def __getattr__(self, name):
        if hasattr(self.protocol, name):
            return getattr(self.protocol, name)
        else:
            raise AttributeError(u"This implementation does not provide the "
                                 u"%s command." % name)


    def __repr__(self):
        return "<%s://%s:%s>" % (self.scheme, self.host, self.port)
    __str__ = __repr__
