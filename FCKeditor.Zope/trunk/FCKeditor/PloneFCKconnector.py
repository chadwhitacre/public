# Python
import re
from cgi import parse_qs
from StringIO import StringIO
from traceback import print_exc

# Zope
from AccessControl import ClassSecurityInfo, Unauthorized
from Globals import InitializeClass
from OFS.SimpleItem import SimpleItem
from OFS.PropertyManager import PropertyManager
from Products.PageTemplates.PageTemplateFile import PageTemplateFile
from Products.CMFCore.utils import UniqueObject
from ZODB.POSException import ConflictError
from zLOG import LOG, WARNING

# us
from Products.FCKeditor.FCKconnector import FCKconnector

# constants
LIST = 'List folder contents'
VIEW = 'View'
ID = 'portal_fckconnector'


class PloneFCKconnector(FCKconnector, UniqueObject, PropertyManager,
                        SimpleItem):
    """A Plone wrapper for FCKconnector.
    """

    security = ClassSecurityInfo()

    id = ID
    title = ''
    meta_type = 'FCKconnector for Plone'

    manage_options = PropertyManager.manage_options +\
                     SimpleItem.manage_options

    def __init__(self, id, title=''):
        self.id = id
        self.title = title

    security.declarePublic('connector')
    def connector(self, REQUEST):
        """Override the base method to do some Zope-specific things.
        """

        # Parse the querystring if necessary.
        # ===================================
        # For GetFolders, GetFoldersAndFiles, and CreateFolder, FCKeditor issues
        # a GET and passes its parameters in the querystring. For FileUpload,
        # FCKeditor does a POST but passes all parameters except NewFile in a
        # querystring on the form action. The action is dynamically generated by
        # some ecmascript in the calling dialog, so you'll never see it if you
        # hit the upload frame or even the browser frameset directly.
        #
        # For forms with method="GET" the form action querystring is overwritten
        # by the form elements. For POSTs, however, the action querystring does
        # end up in the QUERY_STRING CGI variable. However, Zope doesn't
        # automatically parse this querystring for form actions (only for
        # regular urls), so for FileUploads we have to manually add this info
        # to REQUEST.form.

        if REQUEST.get('NewFile', None) is not None:
            # we are processing a FileUpload
            qs = parse_qs(REQUEST['QUERY_STRING']) # from cgi module
            for key in qs: # values are lists
                if len(qs[key]) == 1:
                    REQUEST.form[key] = qs[key][0]
                else:
                    # we always get exactly one value for each key in the QS
                    raise FCKexception, "Malformed query string: " +\
                                        REQUEST['QUERY_STRING']


        # Validate the incoming dictionary.
        # =================================
        # We add the current user so that GetFolders and GetFoldersAndFiles
        # can use it to perform security checks. CreateFolder and FileUpload
        # trigger security by calling invokeFactory.

        data = self._validate(REQUEST)
        data['User'] = REQUEST.get('AUTHENTICATED_USER')


        # Set http response headers.
        # ==========================

        Command = data['Command']
        if Command in ( 'GetFolders'
                      , 'GetFoldersAndFiles'
                      , 'CreateFolder'
                           ):
            REQUEST.RESPONSE.setHeader('Content-Type', 'text/xml')
        REQUEST.RESPONSE.setHeader('Cache-Control', 'no-cache')



        # Do command-specific logic and return.
        # =====================================
        # The logic method returns a dictionary that contains keys specific
        # to its response body. These are added to the main dict, and handed
        # off to the response processor.

        logic_method = getattr(self, Command)
        data.update(logic_method(**data))

        response_method = getattr(self, '%s_response' % Command)
        return response_method(**data)

    def _compute_url(self, ServerPath, Type, CurrentFolder, **other):

        """We depart from the FCK spec at this point because we don't want
        to organize our content in ResourceType folders.

        """
        return CurrentFolder

    __call__ = index_html = connector


    ##
    # Command support
    ##

    security.declarePrivate('GetFolders')
    def GetFolders(self, Type, CurrentFolder, User, **other):
        """Get the list of the children folders of a folder."""

        # Get the folder whose contents we want to list.
        # ==============================================

        try:
            folder = self.unrestrictedTraverse('..'+CurrentFolder)
            exists = True
        except ConflictError: # Always raise.
            raise
        except KeyError: # The CurrentFolder doesn't exist.
            exists = False
            folders = []


        # Get the contents.
        # =================

        if exists:
            if not User.has_permission(LIST, folder):
                folders = []
            else:
                folders = folder.objectValues('Plone Folder')
                folders = [o.getId() for o in folders
                                           if User.has_permission(LIST, o)]


        # Format and return.
        # ==================

        return { 'folders' : folders }



    security.declarePrivate('GetFoldersAndFiles')
    def GetFoldersAndFiles(self, Type, CurrentFolder, User, **other):
        """Gets the list of the children folders and files of a folder."""

        # Get the folder whose contents we want to list.
        # ==============================================

        try:
            folder = self.unrestrictedTraverse('..'+CurrentFolder)
            exists = True
        except ConflictError: # Always raise.
            raise
        except KeyError: # The CurrentFolder doesn't exist.
            exists = False
            folders = files = []


        # Get the contents.
        # =================

        if exists:
            if not User.has_permission(LIST, folder):
                # Return an empty list if the user doesn't have permission.
                folders = files = []
            else:
                # Get folders.
                # ============
                folders = folder.objectValues('Plone Folder')
                folders = [o.getId() for o in folders
                                           if User.has_permission(LIST, o)]


                # Get files.
                # ============

                # Map FCK Type to Zope meta_type.
                if Type == 'Image':
                    meta_types = ('Portal Image',)
                else:
                    meta_types = ('Portal File','Document')

                files = folder.objectValues(meta_types)

                files = [self._file_info(o) for o in files
                                               if User.has_permission(VIEW, o)]


        # Format and return.
        # ==================

        return { 'folders' : folders
               , 'files'   : files
                }

    security.declarePrivate('_file_info')
    def _file_info(self, o):
        """Given an object, return a tuple."""

        id = o.getId()
        size = o.get_size()
        size = float(size) / 1024 # convert to KB
        size = int(round(size))   # round to nearest KB

        return (id, size)



    security.declarePrivate('CreateFolder')
    def CreateFolder(self, Type, CurrentFolder, NewFolderName, **other):
        """Create a child folder.

        Error codes are as follows:

            0   No Errors Found. The folder has been created.
            101 Folder already exists.
            102 Invalid folder name.
            103 You have no permissions to create the folder.
            110 Unknown error creating folder.

        """

        error_code = 0


        # Get the parent of our new folder.
        # =================================

        try:
            folder = self.unrestrictedTraverse('..'+CurrentFolder)
        except ConflictError: # Always raise.
            raise
        except KeyError: # The CurrentFolder doesn't exist.
            error_code = 110


        # Attempt to create the new folder.
        # =================================

        if error_code == 0:
            if NewFolderName in folder.contentIds():
                error_code = 101
            elif folder.check_id(NewFolderName) is not None:
                error_code = 102
            else:
                try:
                    # use invokeFactory so that we trigger security
                    folder.invokeFactory('Folder', NewFolderName)
                    error_code = 0
                except ConflictError: # Always raise.
                    raise
                except Unauthorized:
                    error_code = 103
                except: # catch-all
                    error_code = 110
                    cap = StringIO()
                    print >> cap, "While trying to create a new folder via " +\
                                  "the filebrowser, the following " +\
                                  "exception was captured:\n"
                    print_exc(file=cap)
                    LOG('FCKeditor', WARNING, cap.read())
                    cap.close()


        # Format and return.
        # ==================

        return { 'error_code' : error_code }



    def FileUpload(self, Type, CurrentFolder, NewFile, **kw):
        """Add a file in a folder.

        Our return value gets incorporated into an HTML snippet as the paramater
        list of an ecmascript function call. The ecmascript function in question
        takes one or two parameters. The simplest thing for us to do is to
        return the parameter list as a single string rather than returning each
        parameter individually.

            OnUploadCompleted(0)
                no errors found on the upload process.

            OnUploadCompleted(201, 'FileName(1).ext')
                the file has been uploaded successfully, but its name has been
                changed to "FileName(1).ext".

            OnUploadCompleted(202)
                invalid file.

        """

        error_code = 0


        # Get the parent of our new file.
        # ===============================

        try:
            folder = self.unrestrictedTraverse('..'+CurrentFolder)
        except ConflictError: # Always raise.
            raise
        except KeyError: # The CurrentFolder doesn't exist.
            error_code = 202

        if error_code == 0:


            # Determine the filename to use.
            # ==============================

            NewFileName = NewFile.filename
            filenames = folder.contentIds()

            if NewFileName not in filenames:
                FinalFileName = NewFileName
            else:
                # filename is already in use; take evasive action
                error_code = 201
                FinalFileName = self._incrementFileName(NewFileName, filenames)


            # Map FCK Type to Zope meta_type.
            # ===============================

            if Type == 'Image':
                meta_type = 'Image'
            else:
                meta_type = 'File'


            # Attempt to create the new file.
            # ===============================

            try:
                # Use invokeFactory so that we trigger security.
                folder.invokeFactory(meta_type, FinalFileName, file=NewFile)
                if error_code <> 201:
                    error_code = 0
            except ConflictError: # Always raise.
                raise
            except:
                error_code = 202
                cap = StringIO()
                print >> cap, "While trying to upload a new file via " +\
                              "the filebrowser, the following " +\
                              "exception was captured:\n"
                print_exc(file=cap)
                #print_exc() # debugging during testing -- where does ZTC
                            # log to?
                LOG('FCKeditor', WARNING, cap.read())
                cap.close()


        # Format and return.
        # ===============================

        if error_code == 201:
            param_string = "%s, '%s'" % (str(error_code), FinalFileName)
        else:
            param_string = str(error_code)
        return { 'param_string' : str(param_string) }

InitializeClass(PloneFCKconnector)



##
# Product addition and registration
##

def manage_addPloneFCKconnector(self, REQUEST=None):
    """  """
    self._setObject(ID, PloneFCKconnector(ID))
    if REQUEST is not None:
        return self.manage_main(self, REQUEST, update_menu=1)

def initialize(registrar):
    registrar.registerClass(
        PloneFCKconnector,
        permission='Add FCKconnector for Plone',
        constructors=(manage_addPloneFCKconnector,),
        icon='www/PloneFCKconnector.gif',
        )
