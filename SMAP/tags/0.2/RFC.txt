
SMAP -- Simple Message Access Protocol


Principles:


    A single server for multiple clients

    Information is secure on the server

    The same information could be server by RDF NetAPI, SQL, etc.


Problems:

    SMAP is an anagram for SPAM(!)


MIME message server

all info is actually stored in the message, so if an index is lost, no biggie
in fact, at scale we would probably want async indexers running and checking
messages to catch the rare case of a corrupt message or an unindexed message.

Every client of an SMAP server must have a client ID, which can be any string
not containing newlines. This client id must be registered with the server, and
will be used by the SMAP server to tag that client's messages.

each message has an ID which is generated as follows:

        the filesystem-safe base64 encoding of
            the SHA1 hash of
                the message contents
                the client ID

    this ID is the filename (hence the base64 encoding):

        /var/db/mime/TfWoM14hJwKjjBDChvBqKNQB7O8=


What applications could use smap?

blogging
threaded discussion
email
content management (pages)

name storm:
    messagebase
    mbase
    mimebase
    mimedb
    PyMIMEdb
    mimer
    mimner
    messhall
    smapper
    smapster
    smapattack
    smapdb
    smapit



========================================
    RFC
========================================

SMAP is the Simple Message Access Protocol. It is an application-layer protocol
for storage and retrieval of messages formatted per RFC 2045 (MIME). In SMAP,
each message is stored under an SHA1 hash (RFC 3174) of the message contents,
and is indexed under the headers included in the message. A given server might
implement additional functionality, e.g., it might expose the message store via
an RDF network API.

All MIME messages passed between client and server MUST be:

  1. compressed using the bzip2 compression scheme (http://www.bzip.org/)

  2. encoded using base 64 data encoding (RFC 3548)

The compression keeps network traffic to a minimum, and the encoding simplifies
protocol implementation by enabling the use of the newline character as a
message delimiter.

The SMAP protocol has six commands in three categories:


    Connection commands.

        Discussion:

            A client must begin the conversation with a STRT command. To the
            server's continuation request, the client must provide a key
            which identifies the client to the server for the duration of
            the connection. The only restriction on this key is that it must
            not contain any newline characters. Otherwise, it may be
            anything meaningful to both client and server.

            Until a key has been accepted by the server, the only acceptable
            token from the client is an identification key. Once the key has
            been accepted, the remaining five commands become acceptable.


        Responses:

            101 Please send key.
            201 Thanks!
            401 Bad key; try again.


        Example:

            <connection established>
            RECV: 100 Welcome! Your key?
            SEND: <bad-key>
            RECV: 400 Bad key.
            SEND: <key>
            RECV: 200 Thanks!



        STOP -- STOP a conversation with a server.

            Discussion:

                This command is used to formally end a conversation with an SMAP
                server. Clients and servers can implement timeouts.


            Responses:

                202 Bye.


            Example:

                SEND: STOP
                RECV: 201 Bye.
                <connection closed>



    Storage commands.

        STOR -- STORe a message

            Discussion:

                If the action completes successfully, the server returns the
                SHA1 hash of the message as it appears in the storage medium,
                thereby providing a check on successful storage of the message.
                This hash is the message's unique identifier.


            Responses:

                200 Ok.
                400 Error.


            Example:

                SEND: STOR <MIME message>
                RECV: 200 <ID>


    Retrieval commands

        FIND -- FIND messages based on a list of headers.

            After initiating a FIND exchange, the client sends a list of lines
            specifying the criteria to match. These criteria are of the form:

                header-key <operator> header-value

            Operator is one of:

                IS
                ISNOT
                STARTSWITH
                ISGREATERTHAN
                ISLESSTHAN

            (Note: MIME headers can't have whitespace, so we can use whitespace
            as the delimiter.)

            The server responds with a list of IDs of messages matching the
            given criteria.

            SEND: FIND
            RECV: 100 Please send criteria.
            SEND: <header patterns>
            SEND: 000
            RECV: 100 List follows.
            RECV: <UUID>
            RECV: <...>
            RECV: 000


        HDRS -- Retrieve a message's HeaDeRS

            SEND: HDRS <ID>
            RECV: 200 <MIME headers>


        RTRV -- ReTRieVe a message

            SEND: RTRV <ID>
            RECV: 200 <MIME message>




SMAP is useful for all message-based applications: email, threaded discussion,
content management, blogging, etc.

