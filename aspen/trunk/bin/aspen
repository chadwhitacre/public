#!/usr/local/bin/python
"""This is the main aspen callable. It configures and starts an HTTP server.
"""
import os
import site
import sys

from aspen import mode
#from aspen import daemon
from aspen.server import CherryPyWSGIServer as Server
from aspen.config import Configuration, ConfigError
from aspen.website import Website


def main(argv):

    try:
        config = Configuration(argv[1:])
    except ConfigError, err:
        print >> sys.stderr, err.msg
        print >> sys.stderr, "usage: aspen --help"
        raise SystemExit(2)
    else:

        if config.daemonize:
            raise NotImplementedError("No daemonization yet")
            import daemon
            daemon.become(workdir=config.paths.root)

        if config.log_access is not None:
            raise NotImplementedError("Sorry, no access logging yet :(")

        if config.log_error is not None:
            d,f = os.path.split(config.log_error)
            if not os.path.isdir(d):
                os.makedirs(d)
            sys.stdout = sys.stderr = open(config.log_error, 'a+', 0)

        mode.set(config.mode)
        website = Website(config.paths)
        server = Server(config.address, website)

        if config.uid:
            raise NotImplementedError("Need to reimplement user switchi")
        try:

            if 0:
                import hotshot, hotshot.stats
                prof = hotshot.Profile("bench.prof")
                prof.runcall(server.start)
            else:
                server.start()

        except KeyboardInterrupt:
            server.stop()

        if 0:
            prof.close()
            stats = hotshot.stats.load("bench.prof")
            stats.strip_dirs()
            stats.sort_stats('time', 'calls')
            stats.print_stats(20)


if __name__ == '__main__':
    main(sys.argv)
