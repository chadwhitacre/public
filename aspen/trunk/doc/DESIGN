Intro
=====

Aspen is a Python-centric web server. It serves files statically from the
filesystem, and can be extended in several ways using Python. Aspen is built
around the idea that there are three kinds of websites: publications,
applications, and hybrids.

Therefore, Aspen uses the filesystem for basic site structure, and provides for
plugging applications in as well.


Resource-based Extension through Handlers
==========================================

You can register handlers for files on the filesystem, via the
__/etc/handlers.conf configuration file, which is in INI-style format per the
ConfigParser module. Section names specify Python classes to be used as
handlers, in full dotted-name format per the import statement. The key/values
for each section specify criteria which must match for the handler to be
triggered. More specific handlers (those with more rules matching) are used
first. In case of a tie, position in the configuration file decides the tie.

[aspen.handlers.static.Handler]
svn-prop = aspen:type=foo; svn:mime-type=text/plain
filename = *.html
extension = html,

Only one handler is used for each resource.

QUESTION: How to allow for registering new handler rules? setuputils entry
points?


Path-based Extension through Applications
=========================================

Applications under Aspen are pure Python packages. That is, any directory with
an __init__.py becomes an "application" under Aspen. The __init__.py is expected
to provide a handle callable that takes a dictionary of contexts and returns a
response object.



Global Extension through Hooks
==============================

There are four global hooks:

    o startup
    o request
    o response
    o exception

These are controlled by the __/etc/hooks.conf configuration file. The format is
in modified INI; sections are hook names, values are python callables in
dotted-name notation, one per line. They are called in order.

There is also a global section. Dotted names here are taken to specify Python
modules where we will find hook callables for one or more hooks as named above.
These are called in forward order on startup and request, and reverse order on
response and exception. Where hooks are specified both globally and locally, the
global specification takes precedence.

[global]
aspen.hooks.interactive

[startup]
aspen.hooks.interactive.startup

[request]
aspen.hooks.interactive.request
