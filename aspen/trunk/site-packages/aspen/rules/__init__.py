"""Rules distributed with Aspen.

Rules take a file object and predicate, and return a boolean.

"""
import commands
import fnmatch as _fnmatch

from aspen import RuleError


def fnmatch(fp, predicate):
    """Match using the fnmatch module; always case-sensitive.
    """
    return _fnmatch.fnmatchcase(fp.name, predicate)


def svn_prop(fp, predicate):
    """Match based on an arbitrary subversion property.

    Syntax is:

        svn:prop=foo

    This rule requires the svn command-line client.

    XXX: make this portable (use subprocess instead of command)

    """

    try:
        propname, expected = predicate.split('=',1)
    except ValueError:
        raise RuleError('bad predicate for svn_prop: %s' % predicate)


    # Get the actual prop value.
    # ==========================

    command = "svn propget 'aspen:type' %s" % fp.name
    status, actual = commands.getstatusoutput(command)
    if status > 0:
        raise RuleError(output)
    actual = actual.strip()


    # Compare it to our expected value.
    # =================================

    return expected == actual

