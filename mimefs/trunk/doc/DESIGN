MIME filesystem

    design considerations:
        one server, many, many clients
        ACID
        agnostic (zero configuration)


    like UFS:
        *agnostic re: meaning of bits themselves
        similar api: list, open, read, write, remove
        unencrypted
            apps can provide body enc, of course, but not header
            otherwise we have to manage enc keys, could use uuid I suppose


    unlike UFS:
        *not hierarchical
            inode -> UUID
            path -> param
            concept of linking not applicable ... or is it!?
        ACID, arbitrary transactions
        client/server
            consequence: read/write operate on the entire file; no append
            trades in mime messages, not files per se
        r/w only, no executables
        no protection
        no special files
        no locking
            afaict, the reason to have locking in the storage layer rather than
            in the application layer is so it can be atomic. however, with
            mimefs you can make *any* operation atomic, so locking can be safely
            pushed back up to the app layer
        no caching(?)



what is parallel to a process in our system?

    file
    process -- httpy, process manager that spawns new instances across a farm
    memory
    user/group

should messages be arbitrarily parentable?
    message -> node
    geez that feels heavy and complicated


are users and groups defined at fs or vol level?
users are messages, and therefore have a vid just like every other
fs is conceptually an OS instance
OR MAYBE WE DON'T IMPLEMENT PROTECTION AT ALL?


and do we even need locking since we are already ACID?
also, we are disembodied, i.e., client-server
    if a client {forgets to,dies before it can} release a lock, then what?


fs =
mid = fs.list()[0]
mid = fs.open(mid)
msg = fs.read()
fs.write()





something = file.getmeta()
file.setmeta('', 'something else')
file.write('foo bar')




protection

    Do we want a concept of security in this system? If so, do users exist at
    the fs level or the volume level?

	   O_RDONLY	    n/a: protection
	   O_WRONLY     n/a: protection
	   O_RDWR       n/a: protection
	   O_NONBLOCK	n/a
	   O_APPEND     n/a: networked
	   O_CREAT
	   O_TRUNC
	   O_EXCL
	   O_SHLOCK     n/a: locking
	   O_EXLOCK     n/a: locking
	   O_DIRECT	    n/a: caching
	   O_FSYNC	    n/a: caching
	   O_NOFOLLOW   n/a: links

MQL: MIME Query Language
    MQL = """\
        name = body
        content-type > foo
          """


class txn:
    """under the hood txn gets a txn_id from the server
    the server stores the txn_id in memory, and maps that to a pgsql txn
    either keep the pgsql transaction open
    or run it all at once on commit <- more likely

        >>> txn = db.txn()
        >>> txn.store()
        >>> txn.retrieve()
        >>> txn.commit()

    """



