#!/usr/bin/env python
"""This module defines objects for working with mimefs's.
"""
from xmlrpclib import ServerProxy

__all__ = ['FileSystem', 'Volume', 'Message']


# Define classes.
# ===============

class _MethodWithArgs:
    """Represent a callable on an XMLRPC server with boilerplate arguments.
    """

    def __init__(self, method, *args):
        """Takes a callable, and positional arguments.
        """
        self.__method = method
        self.__args = args

    def __call__(self, *args):
        """Override to add the auth token as the first argument to the call.
        """
        args = self.__args + args
        return self.__method(*args)


class FileSystem:
    """Represent a MIME filesystem.
    """

    __all__ = ('list', 'newvol', 'ping', 'rmvol')

    def __init__(self, uri, key):
        """Takes the URI of the mimefs server, and a master key.
        """
        self._uri = uri
        self._fs = ServerProxy(uri)
        self._key = key

    def __repr__(self):
        return "mimefs filesystem at %s" % self._uri
    __str__ = __repr__

    def __getattr__(self, name):
        if name not in self.__all__:
            raise AttributeError("'%s' not found" % name)
        base_method = getattr(self._fs, name)
        return _MethodWithArgs(base_method, self._key)


class Volume:
    """Represent a single mimefs volume.
    """

    __all__ = ('exists', 'list', 'open', 'remove')

    def __init__(self, uri):
        """Takes the URI of a mimefs volume.
        """
        self.uri = uri
        base, vid = uri.rsplit('/', 1)
        self._fs = ServerProxy(base+'/')
        self._vid = vid

    def __repr__(self):
        return "mimefs volume at %s" % (self.uri)
    __str__ = __repr__

    def __getattr__(self, name):
        if name not in self.__all__:
            raise AttributeError("'%s' not found" % name)
        base_method = getattr(self._fs, name)
        return _MethodWithArgs(base_method, self._vid)


class Message:
    """Represent a message off of a mimefs.
    """

    __all__ = ('read', 'write')

    def __init__(self, uri):
        """Takes the URI of a mimefs volume: https://host:5370/vid/mid
        """
        self.uri = uri
        base, vid, mid = uri.rsplit('/', 2)
        self._fs = ServerProxy(base+'/')
        self._vid = vid
        self._mid = mid

    def __repr__(self):
        return "mimefs message at %s" % (self.uri)
    __str__ = __repr__

    def __getattr__(self, name):
        if name not in self.__all__:
            raise AttributeError("'%s' not found" % name)
        base_method = getattr(self._fs, name)
        return _MethodWithArgs(base_method, self._vid, self._mid)



# test
# ====

if __name__ == '__main__':
    url = 'http://philip:5370/'

    raw = ServerProxy(url)
    print raw.echo('Greetings, program!')

    key = 'a6d9b24e496c4255928b987995ac88b5'
    fs = FileSystem(url, key)

    vid = fs.newvol()
    vol = Volume(url+vid)
    print vol

    t1 = open('test.txt').read()
    t2 = open('test2.txt').read()

    # not keeping test.mp3 in svn due to size
    import base64
    mp3 = base64.b64encode(open('test.mp3').read())
    t3 = 'Content-Type: audio/x-mp3\r\n\r\n%s' % mp3

    for msg in (t1, t2, t3):
        mid = vol.open()
        vol.write(mid, msg)

    from pprint import pprint as pp; import code; code.interact(local=locals())

    # clean up
    fs.rmvol(vid)


"""
        if isinstance(msg, basestring):
            pass
        elif isinstance(msg, Message):
            fp = StringIO()
            g = Generator(fp, mangle_from_=False, maxheaderlen=0)
            g.flatten(msg)
            msg = fp.getvalue()
"""