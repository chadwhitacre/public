#!/usr/bin/env python
"""This module defines objects for working with mimefs's.
"""
from xmlrpclib import ServerProxy


class _MethodWithToken:
    """Represent a callable on an XMLRPC server that requires an auth token.
    """

    def __init__(self, method, token):
        """Takes a callable, and a string.
        """
        self.__method = method
        self.__token = token

    def __call__(self, *args):
        """Override to add the auth token as the first argument to the call.
        """
        args = (self.__token,) + args
        return self.__method(*args)


class MIMEfs:
    """Represent a mimefs.
    """

    def __init__(self, uri, key):
        """Takes the URI of the mimefs server, and a master key.
        """
        self.uri = uri
        self.__proxy = ServerProxy(uri)
        self.__key = key

    def __repr__(self):
        return "MIMEfs at %s" % self.uri
    __str__ = __repr__

    def __getattr__(self, attr):
        """Calls dealing with volumes are prefixed with 'v_'.
        """
        attr = 'v_%s' % attr
        base_method = getattr(self.__proxy, attr)
        return _MethodWithToken(base_method, self.__key)


class Volume:
    """Represent a single mimefs volume.
    """

    def __init__(self, uri):
        """Takes the URI of a mimefs volume.
        """
        self.uri = uri
        base, vid = uri.rsplit('/', 1)
        self.__proxy = ServerProxy(base+'/')
        self.__vid = vid

    def __repr__(self):
        return "Volume at %s" % (self.uri)
    __str__ = __repr__

    def __getattr__(self, attr):
        """Calls dealing with messages are prefixed with 'm_'.
        """
        attr = 'm_%s' % attr
        base_method = getattr(self.__proxy, attr)
        return _MethodWithToken(base_method, self.__vid)



# test
# ====

if __name__ == '__main__':
    url = 'http://philip:5370/'

    raw = ServerProxy(url)
    print raw.echo('Greetings, program!')

    key = 'a6d9b24e496c4255928b987995ac88b5'
    fs = MIMEfs(url, key)

    vid = fs.newvol()
    vol = Volume(url+vid)
    print vol

    t1 = open('test.txt').read()
    t2 = open('test2.txt').read()

    # not keeping this in svn due to size
    import base64
    mp3 = base64.b64encode(open('test.mp3').read())
    t3 = 'Content-Type: audio/x-mp3\r\n\r\n%s' % mp3

    for msg in (t1, t2, t3):
        mid = vol.open()
        vol.write(mid, msg)

    from pprint import pprint as pp; import code; code.interact(local=locals())

    # clean up
    fs.rmvol(vid)


"""
        if isinstance(msg, basestring):
            pass
        elif isinstance(msg, Message):
            fp = StringIO()
            g = Generator(fp, mangle_from_=False, maxheaderlen=0)
            g.flatten(msg)
            msg = fp.getvalue()
"""